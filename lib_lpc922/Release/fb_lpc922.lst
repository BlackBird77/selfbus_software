                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.1.0 #7066 (Jun 14 2012) (Linux)
                              4 ; This file was generated Wed Jun  3 21:39:08 2015
                              5 ;--------------------------------------------------------
                              6 	.module fb_lpc922
                              7 	.optsdcc -mmcs51 --model-small
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _eeprom
                             13 	.globl _read_obj_value
                             14 	.globl _read_value_req
                             15 	.globl _write_value_req
                             16 	.globl _P3_1
                             17 	.globl _P3_0
                             18 	.globl _P1_7
                             19 	.globl _P1_6
                             20 	.globl _P1_5
                             21 	.globl _P1_4
                             22 	.globl _P1_3
                             23 	.globl _P1_2
                             24 	.globl _P1_1
                             25 	.globl _P1_0
                             26 	.globl _P0_7
                             27 	.globl _P0_6
                             28 	.globl _P0_5
                             29 	.globl _P0_4
                             30 	.globl _P0_3
                             31 	.globl _P0_2
                             32 	.globl _P0_1
                             33 	.globl _P0_0
                             34 	.globl _I2CON_0
                             35 	.globl _I2CON_2
                             36 	.globl _I2CON_3
                             37 	.globl _I2CON_4
                             38 	.globl _I2CON_5
                             39 	.globl _I2CON_6
                             40 	.globl _SCON_7
                             41 	.globl _SCON_6
                             42 	.globl _SCON_5
                             43 	.globl _SCON_4
                             44 	.globl _SCON_3
                             45 	.globl _SCON_2
                             46 	.globl _SCON_1
                             47 	.globl _SCON_0
                             48 	.globl _IP0_0
                             49 	.globl _IP0_1
                             50 	.globl _IP0_2
                             51 	.globl _IP0_3
                             52 	.globl _IP0_4
                             53 	.globl _IP0_5
                             54 	.globl _IP0_6
                             55 	.globl _IP1_0
                             56 	.globl _IP1_1
                             57 	.globl _IP1_2
                             58 	.globl _IP1_6
                             59 	.globl _IEN1_0
                             60 	.globl _IEN1_1
                             61 	.globl _IEN1_2
                             62 	.globl _IEN0_0
                             63 	.globl _IEN0_1
                             64 	.globl _IEN0_2
                             65 	.globl _IEN0_3
                             66 	.globl _IEN0_4
                             67 	.globl _IEN0_5
                             68 	.globl _IEN0_6
                             69 	.globl _IEN0_7
                             70 	.globl _TCON_0
                             71 	.globl _TCON_1
                             72 	.globl _TCON_2
                             73 	.globl _TCON_3
                             74 	.globl _TCON_4
                             75 	.globl _TCON_5
                             76 	.globl _TCON_6
                             77 	.globl _TCON_7
                             78 	.globl _PSW_7
                             79 	.globl _PSW_6
                             80 	.globl _PSW_5
                             81 	.globl _PSW_4
                             82 	.globl _PSW_3
                             83 	.globl _PSW_2
                             84 	.globl _PSW_1
                             85 	.globl _PSW_0
                             86 	.globl _IEN1
                             87 	.globl _IP0H
                             88 	.globl _WFEED2
                             89 	.globl _WFEED1
                             90 	.globl _WDL
                             91 	.globl _WDCON
                             92 	.globl _TRIM
                             93 	.globl _TAMOD
                             94 	.globl _SSTAT
                             95 	.globl _RTCL
                             96 	.globl _RTCH
                             97 	.globl _RTCCON
                             98 	.globl _RSTSRC
                             99 	.globl _PT0AD
                            100 	.globl _PCONA
                            101 	.globl _P3M2
                            102 	.globl _P3M1
                            103 	.globl _P1M2
                            104 	.globl _P1M1
                            105 	.globl _P0M2
                            106 	.globl _P0M1
                            107 	.globl _KBPATN
                            108 	.globl _KBMASK
                            109 	.globl _KBCON
                            110 	.globl _IP1H
                            111 	.globl _IP1
                            112 	.globl _I2STAT
                            113 	.globl _I2SCLL
                            114 	.globl _I2SCLH
                            115 	.globl _I2DAT
                            116 	.globl _I2CON
                            117 	.globl _I2ADR
                            118 	.globl _FMDATA
                            119 	.globl _FMCON
                            120 	.globl _FMADRL
                            121 	.globl _FMADRH
                            122 	.globl _DIVM
                            123 	.globl _CMP2
                            124 	.globl _CMP1
                            125 	.globl _BRGCON
                            126 	.globl _BRGR1
                            127 	.globl _BRGR0
                            128 	.globl _SADEN
                            129 	.globl _SADDR
                            130 	.globl _AUXR1
                            131 	.globl _SBUF
                            132 	.globl _SCON
                            133 	.globl _IP0
                            134 	.globl _IEN0
                            135 	.globl _TH1
                            136 	.globl _TH0
                            137 	.globl _TL1
                            138 	.globl _TL0
                            139 	.globl _TMOD
                            140 	.globl _TCON
                            141 	.globl _PCON
                            142 	.globl _DPH
                            143 	.globl _DPL
                            144 	.globl _SP
                            145 	.globl _B
                            146 	.globl _ACC
                            147 	.globl _PSW
                            148 	.globl _P3
                            149 	.globl _P1
                            150 	.globl _P0
                            151 	.globl _telegramm_ok
                            152 	.globl _inc_pcount
                            153 	.globl _connected
                            154 	.globl _send_nack
                            155 	.globl _send_ack
                            156 	.globl _wait_for_ack
                            157 	.globl _fbtx_bit
                            158 	.globl _auto_ack
                            159 	.globl _tel_sent
                            160 	.globl _tel_arrived
                            161 	.globl _its_me
                            162 	.globl _nack
                            163 	.globl _ack
                            164 	.globl _fb_parity
                            165 	.globl _interrupted
                            166 	.globl _parity_ok
                            167 	.globl _connected_timeout
                            168 	.globl _status60
                            169 	.globl _tx_nextsend
                            170 	.globl _tx_nextwrite
                            171 	.globl _RAM
                            172 	.globl _repeat_count
                            173 	.globl _fb_state
                            174 	.globl _fb_pattern
                            175 	.globl _fbrx_byte
                            176 	.globl _cs
                            177 	.globl _telpos
                            178 	.globl _tx_buffer
                            179 	.globl _telegramm
                            180 	.globl _senders_pcount
                            181 	.globl _mem_adrl
                            182 	.globl _mem_adrh
                            183 	.globl _mem_length
                            184 	.globl _pcount
                            185 	.globl _conl
                            186 	.globl _conh
                            187 	.globl _X1_int
                            188 	.globl _T1_int
                            189 	.globl _init_rx
                            190 	.globl _init_tx
                            191 	.globl _gapos_in_gat
                            192 	.globl _send_obj_value
                            193 	.globl _process_tel
                            194 	.globl _read_objflags
                            195 	.globl _restart_hw
                            196 ;--------------------------------------------------------
                            197 ; special function registers
                            198 ;--------------------------------------------------------
                            199 	.area RSEG    (ABS,DATA)
   0000                     200 	.org 0x0000
                    0080    201 G$P0$0$0 == 0x0080
                    0080    202 _P0	=	0x0080
                    0090    203 G$P1$0$0 == 0x0090
                    0090    204 _P1	=	0x0090
                    00B0    205 G$P3$0$0 == 0x00b0
                    00B0    206 _P3	=	0x00b0
                    00D0    207 G$PSW$0$0 == 0x00d0
                    00D0    208 _PSW	=	0x00d0
                    00E0    209 G$ACC$0$0 == 0x00e0
                    00E0    210 _ACC	=	0x00e0
                    00F0    211 G$B$0$0 == 0x00f0
                    00F0    212 _B	=	0x00f0
                    0081    213 G$SP$0$0 == 0x0081
                    0081    214 _SP	=	0x0081
                    0082    215 G$DPL$0$0 == 0x0082
                    0082    216 _DPL	=	0x0082
                    0083    217 G$DPH$0$0 == 0x0083
                    0083    218 _DPH	=	0x0083
                    0087    219 G$PCON$0$0 == 0x0087
                    0087    220 _PCON	=	0x0087
                    0088    221 G$TCON$0$0 == 0x0088
                    0088    222 _TCON	=	0x0088
                    0089    223 G$TMOD$0$0 == 0x0089
                    0089    224 _TMOD	=	0x0089
                    008A    225 G$TL0$0$0 == 0x008a
                    008A    226 _TL0	=	0x008a
                    008B    227 G$TL1$0$0 == 0x008b
                    008B    228 _TL1	=	0x008b
                    008C    229 G$TH0$0$0 == 0x008c
                    008C    230 _TH0	=	0x008c
                    008D    231 G$TH1$0$0 == 0x008d
                    008D    232 _TH1	=	0x008d
                    00A8    233 G$IEN0$0$0 == 0x00a8
                    00A8    234 _IEN0	=	0x00a8
                    00B8    235 G$IP0$0$0 == 0x00b8
                    00B8    236 _IP0	=	0x00b8
                    0098    237 G$SCON$0$0 == 0x0098
                    0098    238 _SCON	=	0x0098
                    0099    239 G$SBUF$0$0 == 0x0099
                    0099    240 _SBUF	=	0x0099
                    00A2    241 G$AUXR1$0$0 == 0x00a2
                    00A2    242 _AUXR1	=	0x00a2
                    00A9    243 G$SADDR$0$0 == 0x00a9
                    00A9    244 _SADDR	=	0x00a9
                    00B9    245 G$SADEN$0$0 == 0x00b9
                    00B9    246 _SADEN	=	0x00b9
                    00BE    247 G$BRGR0$0$0 == 0x00be
                    00BE    248 _BRGR0	=	0x00be
                    00BF    249 G$BRGR1$0$0 == 0x00bf
                    00BF    250 _BRGR1	=	0x00bf
                    00BD    251 G$BRGCON$0$0 == 0x00bd
                    00BD    252 _BRGCON	=	0x00bd
                    00AC    253 G$CMP1$0$0 == 0x00ac
                    00AC    254 _CMP1	=	0x00ac
                    00AD    255 G$CMP2$0$0 == 0x00ad
                    00AD    256 _CMP2	=	0x00ad
                    0095    257 G$DIVM$0$0 == 0x0095
                    0095    258 _DIVM	=	0x0095
                    00E7    259 G$FMADRH$0$0 == 0x00e7
                    00E7    260 _FMADRH	=	0x00e7
                    00E6    261 G$FMADRL$0$0 == 0x00e6
                    00E6    262 _FMADRL	=	0x00e6
                    00E4    263 G$FMCON$0$0 == 0x00e4
                    00E4    264 _FMCON	=	0x00e4
                    00E5    265 G$FMDATA$0$0 == 0x00e5
                    00E5    266 _FMDATA	=	0x00e5
                    00DB    267 G$I2ADR$0$0 == 0x00db
                    00DB    268 _I2ADR	=	0x00db
                    00D8    269 G$I2CON$0$0 == 0x00d8
                    00D8    270 _I2CON	=	0x00d8
                    00DA    271 G$I2DAT$0$0 == 0x00da
                    00DA    272 _I2DAT	=	0x00da
                    00DD    273 G$I2SCLH$0$0 == 0x00dd
                    00DD    274 _I2SCLH	=	0x00dd
                    00DC    275 G$I2SCLL$0$0 == 0x00dc
                    00DC    276 _I2SCLL	=	0x00dc
                    00D9    277 G$I2STAT$0$0 == 0x00d9
                    00D9    278 _I2STAT	=	0x00d9
                    00F8    279 G$IP1$0$0 == 0x00f8
                    00F8    280 _IP1	=	0x00f8
                    00F7    281 G$IP1H$0$0 == 0x00f7
                    00F7    282 _IP1H	=	0x00f7
                    0094    283 G$KBCON$0$0 == 0x0094
                    0094    284 _KBCON	=	0x0094
                    0086    285 G$KBMASK$0$0 == 0x0086
                    0086    286 _KBMASK	=	0x0086
                    0093    287 G$KBPATN$0$0 == 0x0093
                    0093    288 _KBPATN	=	0x0093
                    0084    289 G$P0M1$0$0 == 0x0084
                    0084    290 _P0M1	=	0x0084
                    0085    291 G$P0M2$0$0 == 0x0085
                    0085    292 _P0M2	=	0x0085
                    0091    293 G$P1M1$0$0 == 0x0091
                    0091    294 _P1M1	=	0x0091
                    0092    295 G$P1M2$0$0 == 0x0092
                    0092    296 _P1M2	=	0x0092
                    00B1    297 G$P3M1$0$0 == 0x00b1
                    00B1    298 _P3M1	=	0x00b1
                    00B2    299 G$P3M2$0$0 == 0x00b2
                    00B2    300 _P3M2	=	0x00b2
                    00B5    301 G$PCONA$0$0 == 0x00b5
                    00B5    302 _PCONA	=	0x00b5
                    00F6    303 G$PT0AD$0$0 == 0x00f6
                    00F6    304 _PT0AD	=	0x00f6
                    00DF    305 G$RSTSRC$0$0 == 0x00df
                    00DF    306 _RSTSRC	=	0x00df
                    00D1    307 G$RTCCON$0$0 == 0x00d1
                    00D1    308 _RTCCON	=	0x00d1
                    00D2    309 G$RTCH$0$0 == 0x00d2
                    00D2    310 _RTCH	=	0x00d2
                    00D3    311 G$RTCL$0$0 == 0x00d3
                    00D3    312 _RTCL	=	0x00d3
                    00BA    313 G$SSTAT$0$0 == 0x00ba
                    00BA    314 _SSTAT	=	0x00ba
                    008F    315 G$TAMOD$0$0 == 0x008f
                    008F    316 _TAMOD	=	0x008f
                    0096    317 G$TRIM$0$0 == 0x0096
                    0096    318 _TRIM	=	0x0096
                    00A7    319 G$WDCON$0$0 == 0x00a7
                    00A7    320 _WDCON	=	0x00a7
                    00C1    321 G$WDL$0$0 == 0x00c1
                    00C1    322 _WDL	=	0x00c1
                    00C2    323 G$WFEED1$0$0 == 0x00c2
                    00C2    324 _WFEED1	=	0x00c2
                    00C3    325 G$WFEED2$0$0 == 0x00c3
                    00C3    326 _WFEED2	=	0x00c3
                    00B7    327 G$IP0H$0$0 == 0x00b7
                    00B7    328 _IP0H	=	0x00b7
                    00E8    329 G$IEN1$0$0 == 0x00e8
                    00E8    330 _IEN1	=	0x00e8
                            331 ;--------------------------------------------------------
                            332 ; special function bits
                            333 ;--------------------------------------------------------
                            334 	.area RSEG    (ABS,DATA)
   0000                     335 	.org 0x0000
                    00D0    336 G$PSW_0$0$0 == 0x00d0
                    00D0    337 _PSW_0	=	0x00d0
                    00D1    338 G$PSW_1$0$0 == 0x00d1
                    00D1    339 _PSW_1	=	0x00d1
                    00D2    340 G$PSW_2$0$0 == 0x00d2
                    00D2    341 _PSW_2	=	0x00d2
                    00D3    342 G$PSW_3$0$0 == 0x00d3
                    00D3    343 _PSW_3	=	0x00d3
                    00D4    344 G$PSW_4$0$0 == 0x00d4
                    00D4    345 _PSW_4	=	0x00d4
                    00D5    346 G$PSW_5$0$0 == 0x00d5
                    00D5    347 _PSW_5	=	0x00d5
                    00D6    348 G$PSW_6$0$0 == 0x00d6
                    00D6    349 _PSW_6	=	0x00d6
                    00D7    350 G$PSW_7$0$0 == 0x00d7
                    00D7    351 _PSW_7	=	0x00d7
                    008F    352 G$TCON_7$0$0 == 0x008f
                    008F    353 _TCON_7	=	0x008f
                    008E    354 G$TCON_6$0$0 == 0x008e
                    008E    355 _TCON_6	=	0x008e
                    008D    356 G$TCON_5$0$0 == 0x008d
                    008D    357 _TCON_5	=	0x008d
                    008C    358 G$TCON_4$0$0 == 0x008c
                    008C    359 _TCON_4	=	0x008c
                    008B    360 G$TCON_3$0$0 == 0x008b
                    008B    361 _TCON_3	=	0x008b
                    008A    362 G$TCON_2$0$0 == 0x008a
                    008A    363 _TCON_2	=	0x008a
                    0089    364 G$TCON_1$0$0 == 0x0089
                    0089    365 _TCON_1	=	0x0089
                    0088    366 G$TCON_0$0$0 == 0x0088
                    0088    367 _TCON_0	=	0x0088
                    00AF    368 G$IEN0_7$0$0 == 0x00af
                    00AF    369 _IEN0_7	=	0x00af
                    00AE    370 G$IEN0_6$0$0 == 0x00ae
                    00AE    371 _IEN0_6	=	0x00ae
                    00AD    372 G$IEN0_5$0$0 == 0x00ad
                    00AD    373 _IEN0_5	=	0x00ad
                    00AC    374 G$IEN0_4$0$0 == 0x00ac
                    00AC    375 _IEN0_4	=	0x00ac
                    00AB    376 G$IEN0_3$0$0 == 0x00ab
                    00AB    377 _IEN0_3	=	0x00ab
                    00AA    378 G$IEN0_2$0$0 == 0x00aa
                    00AA    379 _IEN0_2	=	0x00aa
                    00A9    380 G$IEN0_1$0$0 == 0x00a9
                    00A9    381 _IEN0_1	=	0x00a9
                    00A8    382 G$IEN0_0$0$0 == 0x00a8
                    00A8    383 _IEN0_0	=	0x00a8
                    00EA    384 G$IEN1_2$0$0 == 0x00ea
                    00EA    385 _IEN1_2	=	0x00ea
                    00E9    386 G$IEN1_1$0$0 == 0x00e9
                    00E9    387 _IEN1_1	=	0x00e9
                    00E8    388 G$IEN1_0$0$0 == 0x00e8
                    00E8    389 _IEN1_0	=	0x00e8
                    00FE    390 G$IP1_6$0$0 == 0x00fe
                    00FE    391 _IP1_6	=	0x00fe
                    00FA    392 G$IP1_2$0$0 == 0x00fa
                    00FA    393 _IP1_2	=	0x00fa
                    00F9    394 G$IP1_1$0$0 == 0x00f9
                    00F9    395 _IP1_1	=	0x00f9
                    00F8    396 G$IP1_0$0$0 == 0x00f8
                    00F8    397 _IP1_0	=	0x00f8
                    00BE    398 G$IP0_6$0$0 == 0x00be
                    00BE    399 _IP0_6	=	0x00be
                    00BD    400 G$IP0_5$0$0 == 0x00bd
                    00BD    401 _IP0_5	=	0x00bd
                    00BC    402 G$IP0_4$0$0 == 0x00bc
                    00BC    403 _IP0_4	=	0x00bc
                    00BB    404 G$IP0_3$0$0 == 0x00bb
                    00BB    405 _IP0_3	=	0x00bb
                    00BA    406 G$IP0_2$0$0 == 0x00ba
                    00BA    407 _IP0_2	=	0x00ba
                    00B9    408 G$IP0_1$0$0 == 0x00b9
                    00B9    409 _IP0_1	=	0x00b9
                    00B8    410 G$IP0_0$0$0 == 0x00b8
                    00B8    411 _IP0_0	=	0x00b8
                    0098    412 G$SCON_0$0$0 == 0x0098
                    0098    413 _SCON_0	=	0x0098
                    0099    414 G$SCON_1$0$0 == 0x0099
                    0099    415 _SCON_1	=	0x0099
                    009A    416 G$SCON_2$0$0 == 0x009a
                    009A    417 _SCON_2	=	0x009a
                    009B    418 G$SCON_3$0$0 == 0x009b
                    009B    419 _SCON_3	=	0x009b
                    009C    420 G$SCON_4$0$0 == 0x009c
                    009C    421 _SCON_4	=	0x009c
                    009D    422 G$SCON_5$0$0 == 0x009d
                    009D    423 _SCON_5	=	0x009d
                    009E    424 G$SCON_6$0$0 == 0x009e
                    009E    425 _SCON_6	=	0x009e
                    009F    426 G$SCON_7$0$0 == 0x009f
                    009F    427 _SCON_7	=	0x009f
                    00DE    428 G$I2CON_6$0$0 == 0x00de
                    00DE    429 _I2CON_6	=	0x00de
                    00DD    430 G$I2CON_5$0$0 == 0x00dd
                    00DD    431 _I2CON_5	=	0x00dd
                    00DC    432 G$I2CON_4$0$0 == 0x00dc
                    00DC    433 _I2CON_4	=	0x00dc
                    00DB    434 G$I2CON_3$0$0 == 0x00db
                    00DB    435 _I2CON_3	=	0x00db
                    00DA    436 G$I2CON_2$0$0 == 0x00da
                    00DA    437 _I2CON_2	=	0x00da
                    00D8    438 G$I2CON_0$0$0 == 0x00d8
                    00D8    439 _I2CON_0	=	0x00d8
                    0080    440 G$P0_0$0$0 == 0x0080
                    0080    441 _P0_0	=	0x0080
                    0081    442 G$P0_1$0$0 == 0x0081
                    0081    443 _P0_1	=	0x0081
                    0082    444 G$P0_2$0$0 == 0x0082
                    0082    445 _P0_2	=	0x0082
                    0083    446 G$P0_3$0$0 == 0x0083
                    0083    447 _P0_3	=	0x0083
                    0084    448 G$P0_4$0$0 == 0x0084
                    0084    449 _P0_4	=	0x0084
                    0085    450 G$P0_5$0$0 == 0x0085
                    0085    451 _P0_5	=	0x0085
                    0086    452 G$P0_6$0$0 == 0x0086
                    0086    453 _P0_6	=	0x0086
                    0087    454 G$P0_7$0$0 == 0x0087
                    0087    455 _P0_7	=	0x0087
                    0090    456 G$P1_0$0$0 == 0x0090
                    0090    457 _P1_0	=	0x0090
                    0091    458 G$P1_1$0$0 == 0x0091
                    0091    459 _P1_1	=	0x0091
                    0092    460 G$P1_2$0$0 == 0x0092
                    0092    461 _P1_2	=	0x0092
                    0093    462 G$P1_3$0$0 == 0x0093
                    0093    463 _P1_3	=	0x0093
                    0094    464 G$P1_4$0$0 == 0x0094
                    0094    465 _P1_4	=	0x0094
                    0095    466 G$P1_5$0$0 == 0x0095
                    0095    467 _P1_5	=	0x0095
                    0096    468 G$P1_6$0$0 == 0x0096
                    0096    469 _P1_6	=	0x0096
                    0097    470 G$P1_7$0$0 == 0x0097
                    0097    471 _P1_7	=	0x0097
                    00B0    472 G$P3_0$0$0 == 0x00b0
                    00B0    473 _P3_0	=	0x00b0
                    00B1    474 G$P3_1$0$0 == 0x00b1
                    00B1    475 _P3_1	=	0x00b1
                            476 ;--------------------------------------------------------
                            477 ; overlayable register banks
                            478 ;--------------------------------------------------------
                            479 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     480 	.ds 8
                            481 ;--------------------------------------------------------
                            482 ; overlayable bit register bank
                            483 ;--------------------------------------------------------
                            484 	.area BIT_BANK	(REL,OVR,DATA)
   0000                     485 bits:
   0000                     486 	.ds 1
                    8000    487 	b0 = bits[0]
                    8100    488 	b1 = bits[1]
                    8200    489 	b2 = bits[2]
                    8300    490 	b3 = bits[3]
                    8400    491 	b4 = bits[4]
                    8500    492 	b5 = bits[5]
                    8600    493 	b6 = bits[6]
                    8700    494 	b7 = bits[7]
                            495 ;--------------------------------------------------------
                            496 ; internal ram data
                            497 ;--------------------------------------------------------
                            498 	.area DSEG    (DATA)
                    0000    499 G$conh$0$0==.
   0000                     500 _conh::
   0000                     501 	.ds 1
                    0001    502 G$conl$0$0==.
   0001                     503 _conl::
   0001                     504 	.ds 1
                    0002    505 G$pcount$0$0==.
   0002                     506 _pcount::
   0002                     507 	.ds 1
                    0003    508 G$mem_length$0$0==.
   0003                     509 _mem_length::
   0003                     510 	.ds 1
                    0004    511 G$mem_adrh$0$0==.
   0004                     512 _mem_adrh::
   0004                     513 	.ds 1
                    0005    514 G$mem_adrl$0$0==.
   0005                     515 _mem_adrl::
   0005                     516 	.ds 1
                    0006    517 G$senders_pcount$0$0==.
   0006                     518 _senders_pcount::
   0006                     519 	.ds 1
                    0007    520 G$telegramm$0$0==.
   0007                     521 _telegramm::
   0007                     522 	.ds 23
                    001E    523 G$tx_buffer$0$0==.
   001E                     524 _tx_buffer::
   001E                     525 	.ds 8
                    0026    526 G$telpos$0$0==.
   0026                     527 _telpos::
   0026                     528 	.ds 1
                    0027    529 G$cs$0$0==.
   0027                     530 _cs::
   0027                     531 	.ds 1
                    0028    532 G$fbrx_byte$0$0==.
   0028                     533 _fbrx_byte::
   0028                     534 	.ds 1
                    0029    535 G$fb_pattern$0$0==.
   0029                     536 _fb_pattern::
   0029                     537 	.ds 1
                    002A    538 G$fb_state$0$0==.
   002A                     539 _fb_state::
   002A                     540 	.ds 1
                    002B    541 G$repeat_count$0$0==.
   002B                     542 _repeat_count::
   002B                     543 	.ds 1
                    0000    544 G$RAM$0$0 == 0x0000
                    0000    545 _RAM	=	0x0000
                    002C    546 G$tx_nextwrite$0$0==.
   002C                     547 _tx_nextwrite::
   002C                     548 	.ds 1
                    002D    549 G$tx_nextsend$0$0==.
   002D                     550 _tx_nextsend::
   002D                     551 	.ds 1
                    002E    552 G$status60$0$0==.
   002E                     553 _status60::
   002E                     554 	.ds 1
                    002F    555 G$connected_timeout$0$0==.
   002F                     556 _connected_timeout::
   002F                     557 	.ds 1
                            558 ;--------------------------------------------------------
                            559 ; overlayable items in internal ram 
                            560 ;--------------------------------------------------------
                            561 	.area OSEG    (OVR,DATA)
                            562 ;--------------------------------------------------------
                            563 ; indirectly addressable internal ram data
                            564 ;--------------------------------------------------------
                            565 	.area ISEG    (DATA)
                            566 ;--------------------------------------------------------
                            567 ; absolute internal ram data
                            568 ;--------------------------------------------------------
                            569 	.area IABS    (ABS,DATA)
                            570 	.area IABS    (ABS,DATA)
                            571 ;--------------------------------------------------------
                            572 ; bit data
                            573 ;--------------------------------------------------------
                            574 	.area BSEG    (BIT)
                    0000    575 G$parity_ok$0$0==.
   0000                     576 _parity_ok::
   0000                     577 	.ds 1
                    0001    578 G$interrupted$0$0==.
   0001                     579 _interrupted::
   0001                     580 	.ds 1
                    0002    581 G$fb_parity$0$0==.
   0002                     582 _fb_parity::
   0002                     583 	.ds 1
                    0003    584 G$ack$0$0==.
   0003                     585 _ack::
   0003                     586 	.ds 1
                    0004    587 G$nack$0$0==.
   0004                     588 _nack::
   0004                     589 	.ds 1
                    0005    590 G$its_me$0$0==.
   0005                     591 _its_me::
   0005                     592 	.ds 1
                    0006    593 G$tel_arrived$0$0==.
   0006                     594 _tel_arrived::
   0006                     595 	.ds 1
                    0007    596 G$tel_sent$0$0==.
   0007                     597 _tel_sent::
   0007                     598 	.ds 1
                    0008    599 G$auto_ack$0$0==.
   0008                     600 _auto_ack::
   0008                     601 	.ds 1
                    0009    602 G$fbtx_bit$0$0==.
   0009                     603 _fbtx_bit::
   0009                     604 	.ds 1
                    000A    605 G$wait_for_ack$0$0==.
   000A                     606 _wait_for_ack::
   000A                     607 	.ds 1
                    000B    608 G$send_ack$0$0==.
   000B                     609 _send_ack::
   000B                     610 	.ds 1
                    000C    611 G$send_nack$0$0==.
   000C                     612 _send_nack::
   000C                     613 	.ds 1
                    000D    614 G$connected$0$0==.
   000D                     615 _connected::
   000D                     616 	.ds 1
                    000E    617 G$inc_pcount$0$0==.
   000E                     618 _inc_pcount::
   000E                     619 	.ds 1
                    000F    620 G$telegramm_ok$0$0==.
   000F                     621 _telegramm_ok::
   000F                     622 	.ds 1
                            623 ;--------------------------------------------------------
                            624 ; paged external ram data
                            625 ;--------------------------------------------------------
                            626 	.area PSEG    (PAG,XDATA)
                            627 ;--------------------------------------------------------
                            628 ; external ram data
                            629 ;--------------------------------------------------------
                            630 	.area XSEG    (XDATA)
                            631 ;--------------------------------------------------------
                            632 ; absolute external ram data
                            633 ;--------------------------------------------------------
                            634 	.area XABS    (ABS,XDATA)
                            635 ;--------------------------------------------------------
                            636 ; external initialized ram data
                            637 ;--------------------------------------------------------
                            638 	.area XISEG   (XDATA)
                            639 	.area HOME    (CODE)
                            640 	.area GSINIT0 (CODE)
                            641 	.area GSINIT1 (CODE)
                            642 	.area GSINIT2 (CODE)
                            643 	.area GSINIT3 (CODE)
                            644 	.area GSINIT4 (CODE)
                            645 	.area GSINIT5 (CODE)
                            646 	.area GSINIT  (CODE)
                            647 	.area GSFINAL (CODE)
                            648 	.area CSEG    (CODE)
                            649 ;--------------------------------------------------------
                            650 ; global & static initialisations
                            651 ;--------------------------------------------------------
                            652 	.area HOME    (CODE)
                            653 	.area GSINIT  (CODE)
                            654 	.area GSFINAL (CODE)
                            655 	.area GSINIT  (CODE)
                            656 ;--------------------------------------------------------
                            657 ; Home
                            658 ;--------------------------------------------------------
                            659 	.area HOME    (CODE)
                            660 	.area HOME    (CODE)
                            661 ;--------------------------------------------------------
                            662 ; code
                            663 ;--------------------------------------------------------
                            664 	.area CSEG    (CODE)
                            665 ;------------------------------------------------------------
                            666 ;Allocation info for local variables in function 'X1_int'
                            667 ;------------------------------------------------------------
                    0000    668 	G$X1_int$0$0 ==.
                    0000    669 	C$fb_lpc922.c$54$0$0 ==.
                            670 ;	../fb_lpc922.c:54: void X1_int(void) __interrupt (2)		// Flanke des Startbits laest int1 aus
                            671 ;	-----------------------------------------
                            672 ;	 function X1_int
                            673 ;	-----------------------------------------
   0000                     674 _X1_int:
                    0007    675 	ar7 = 0x07
                    0006    676 	ar6 = 0x06
                    0005    677 	ar5 = 0x05
                    0004    678 	ar4 = 0x04
                    0003    679 	ar3 = 0x03
                    0002    680 	ar2 = 0x02
                    0001    681 	ar1 = 0x01
                    0000    682 	ar0 = 0x00
   0000 C0 E0               683 	push	acc
   0002 C0 D0               684 	push	psw
                    0004    685 	C$fb_lpc922.c$57$1$1 ==.
                            686 ;	../fb_lpc922.c:57: EX1=0;			// int1 stoppen								1 cycle = 0,27127us
   0004 C2 AA               687 	clr	_IEN0_2
                    0006    688 	C$fb_lpc922.c$58$1$1 ==.
                            689 ;	../fb_lpc922.c:58: TR1=0;			// Timer 1 stoppen
   0006 C2 8E               690 	clr	_TCON_6
                    0008    691 	C$fb_lpc922.c$59$1$1 ==.
                            692 ;	../fb_lpc922.c:59: TMOD=(TMOD & 0x0F) + 0x20;	// Timer 1 als 8-Bit autoreload
   0008 74 0F               693 	mov	a,#0x0F
   000A 55 89               694 	anl	a,_TMOD
   000C 24 20               695 	add	a,#0x20
   000E F5 89               696 	mov	_TMOD,a
                    0010    697 	C$fb_lpc922.c$60$1$1 ==.
                            698 ;	../fb_lpc922.c:60: TL1=53;//108;//128;		// Timer laden so dass in state 2 bei 75Âµs abgefragt wird
   0010 75 8B 35            699 	mov	_TL1,#0x35
                    0013    700 	C$fb_lpc922.c$61$1$1 ==.
                            701 ;	../fb_lpc922.c:61: TH1=128;//128;			// autoreload auf 35Âµs setzen (gilt fuer sprung von 2 auf 3)
   0013 75 8D 80            702 	mov	_TH1,#0x80
                    0016    703 	C$fb_lpc922.c$62$1$1 ==.
                            704 ;	../fb_lpc922.c:62: TF1=0;			// Timer1-flag loeschen						1 cycle
   0016 C2 8F               705 	clr	_TCON_7
                    0018    706 	C$fb_lpc922.c$63$1$1 ==.
                            707 ;	../fb_lpc922.c:63: TR1=1;			// Timer1 starten							1 cycle
   0018 D2 8E               708 	setb	_TCON_6
                    001A    709 	C$fb_lpc922.c$64$1$1 ==.
                            710 ;	../fb_lpc922.c:64: ET1=1;			// Timer1-int aktiv							1 cycle
   001A D2 AB               711 	setb	_IEN0_3
                    001C    712 	C$fb_lpc922.c$65$1$1 ==.
                            713 ;	../fb_lpc922.c:65: fb_state=2;		// naechster state
   001C 75*2A 02            714 	mov	_fb_state,#0x02
                    001F    715 	C$fb_lpc922.c$66$1$1 ==.
                            716 ;	../fb_lpc922.c:66: fb_parity=0;	// Parity Bit loeschen
   001F C2*02               717 	clr	_fb_parity
                    0021    718 	C$fb_lpc922.c$67$1$1 ==.
                            719 ;	../fb_lpc922.c:67: parity_ok=1;	// wird bei Fehler geloescht
   0021 D2*00               720 	setb	_parity_ok
                    0023    721 	C$fb_lpc922.c$68$1$1 ==.
                            722 ;	../fb_lpc922.c:68: fb_pattern=0;
   0023 75*29 00            723 	mov	_fb_pattern,#0x00
                    0026    724 	C$fb_lpc922.c$69$1$1 ==.
                            725 ;	../fb_lpc922.c:69: fbrx_byte=0;
   0026 75*28 00            726 	mov	_fbrx_byte,#0x00
                    0029    727 	C$fb_lpc922.c$70$1$1 ==.
                            728 ;	../fb_lpc922.c:70: interrupted=1;	// signalisiert app, dass unterbrochen wurde
   0029 D2*01               729 	setb	_interrupted
   002B D0 D0               730 	pop	psw
   002D D0 E0               731 	pop	acc
                    002F    732 	C$fb_lpc922.c$71$1$1 ==.
                    002F    733 	XG$X1_int$0$0 ==.
   002F 32                  734 	reti
                            735 ;	eliminated unneeded mov psw,# (no regs used in bank)
                            736 ;	eliminated unneeded push/pop dpl
                            737 ;	eliminated unneeded push/pop dph
                            738 ;	eliminated unneeded push/pop b
                            739 ;------------------------------------------------------------
                            740 ;Allocation info for local variables in function 'T1_int'
                            741 ;------------------------------------------------------------
                            742 ;fbrx_bit                  Allocated to registers b0 
                            743 ;send_byte                 Allocated to registers r7 
                            744 ;objno                     Allocated to registers r7 
                            745 ;build_ok                  Allocated to registers b0 
                            746 ;objvalue                  Allocated to stack - _bp +1
                            747 ;gapos                     Allocated to registers r5 r6 
                            748 ;objtype                   Allocated to registers r6 
                            749 ;n                         Allocated to registers r7 
                            750 ;length                    Allocated to registers r6 
                            751 ;asspos                    Allocated to registers r4 
                            752 ;type                      Allocated to registers b2 
                            753 ;repeatflag                Allocated to registers b1 
                            754 ;------------------------------------------------------------
                    0030    755 	G$T1_int$0$0 ==.
                    0030    756 	C$fb_lpc922.c$75$1$1 ==.
                            757 ;	../fb_lpc922.c:75: void T1_int(void) __interrupt (3) 	// Timer 1 Interrupt
                            758 ;	-----------------------------------------
                            759 ;	 function T1_int
                            760 ;	-----------------------------------------
   0030                     761 _T1_int:
   0030 C0*00               762 	push	bits
   0032 C0 E0               763 	push	acc
   0034 C0 F0               764 	push	b
   0036 C0 82               765 	push	dpl
   0038 C0 83               766 	push	dph
   003A C0 07               767 	push	(0+7)
   003C C0 06               768 	push	(0+6)
   003E C0 05               769 	push	(0+5)
   0040 C0 04               770 	push	(0+4)
   0042 C0 03               771 	push	(0+3)
   0044 C0 02               772 	push	(0+2)
   0046 C0 01               773 	push	(0+1)
   0048 C0 00               774 	push	(0+0)
   004A C0 D0               775 	push	psw
   004C 75 D0 00            776 	mov	psw,#0x00
   004F C0*00               777 	push	_bp
   0051 E5 81               778 	mov	a,sp
   0053 F5*00               779 	mov	_bp,a
   0055 24 04               780 	add	a,#0x04
   0057 F5 81               781 	mov	sp,a
                    0059    782 	C$fb_lpc922.c$81$1$1 ==.
                            783 ;	../fb_lpc922.c:81: switch (fb_state){
   0059 E5*2A               784 	mov	a,_fb_state
   005B FF                  785 	mov	r7,a
   005C 24 F1               786 	add	a,#0xff - 0x0E
   005E 50 03               787 	jnc	00328$
   0060 02s05rC1            788 	ljmp	00255$
   0063                     789 00328$:
   0063 EF                  790 	mov	a,r7
   0064 2F                  791 	add	a,r7
   0065 2F                  792 	add	a,r7
   0066 90s00r6A            793 	mov	dptr,#00329$
   0069 73                  794 	jmp	@a+dptr
   006A                     795 00329$:
   006A 02s00r97            796 	ljmp	00101$
   006D 02s05rC1            797 	ljmp	00255$
   0070 02s03r5B            798 	ljmp	00152$
   0073 02s04r1B            799 	ljmp	00189$
   0076 02s04r24            800 	ljmp	00190$
   0079 02s04rAE            801 	ljmp	00211$
   007C 02s05rC1            802 	ljmp	00255$
   007F 02s05rC1            803 	ljmp	00255$
   0082 02s05rC1            804 	ljmp	00255$
   0085 02s05rC1            805 	ljmp	00255$
   0088 02s04rD0            806 	ljmp	00218$
   008B 02s05r38            807 	ljmp	00239$
   008E 02s05rC1            808 	ljmp	00255$
   0091 02s05r5C            809 	ljmp	00246$
   0094 02s05rAA            810 	ljmp	00254$
                    0097    811 	C$fb_lpc922.c$85$2$2 ==.
                            812 ;	../fb_lpc922.c:85: case 0:
   0097                     813 00101$:
                    0097    814 	C$fb_lpc922.c$86$2$2 ==.
                            815 ;	../fb_lpc922.c:86: TR1=0;			// Timer 1 stoppen
   0097 C2 8E               816 	clr	_TCON_6
                    0099    817 	C$fb_lpc922.c$87$2$2 ==.
                            818 ;	../fb_lpc922.c:87: TMOD=(TMOD & 0x0F) + 0x20;	// Timer 1 als 8-Bit autoreload
   0099 74 0F               819 	mov	a,#0x0F
   009B 55 89               820 	anl	a,_TMOD
   009D 24 20               821 	add	a,#0x20
   009F F5 89               822 	mov	_TMOD,a
                    00A1    823 	C$fb_lpc922.c$88$2$2 ==.
                            824 ;	../fb_lpc922.c:88: TL1=128;		// Timer laden
   00A1 75 8B 80            825 	mov	_TL1,#0x80
                    00A4    826 	C$fb_lpc922.c$89$2$2 ==.
                            827 ;	../fb_lpc922.c:89: TH1=128;
   00A4 75 8D 80            828 	mov	_TH1,#0x80
                    00A7    829 	C$fb_lpc922.c$90$2$2 ==.
                            830 ;	../fb_lpc922.c:90: TF1=0;			// Timer1-flag loeschen						1 cycle
   00A7 C2 8F               831 	clr	_TCON_7
                    00A9    832 	C$fb_lpc922.c$91$2$2 ==.
                            833 ;	../fb_lpc922.c:91: TR1=1;			// Timer1 starten							1 cycle
   00A9 D2 8E               834 	setb	_TCON_6
                    00AB    835 	C$fb_lpc922.c$92$2$2 ==.
                            836 ;	../fb_lpc922.c:92: if(tx_nextsend != tx_nextwrite) { 			// wenn zu sendendes Objekt vorhanden
   00AB E5*2C               837 	mov	a,_tx_nextwrite
   00AD B5*2D 03            838 	cjne	a,_tx_nextsend,00330$
   00B0 02s03r54            839 	ljmp	00150$
   00B3                     840 00330$:
                    00B3    841 	C$fb_lpc922.c$96$3$3 ==.
                            842 ;	../fb_lpc922.c:96: unsigned char objno=tx_buffer[tx_nextsend];
   00B3 E5*2D               843 	mov	a,_tx_nextsend
   00B5 24r1E               844 	add	a,#_tx_buffer
   00B7 F9                  845 	mov	r1,a
   00B8 87 07               846 	mov	ar7,@r1
                    00BA    847 	C$fb_lpc922.c$97$3$3 ==.
                            848 ;	../fb_lpc922.c:97: __bit build_ok=0;
   00BA C2*00               849 	clr	b0
                    00BC    850 	C$fb_lpc922.c$99$3$3 ==.
                            851 ;	../fb_lpc922.c:99: unsigned int gapos=0xFE;
   00BC 7D FE               852 	mov	r5,#0xFE
   00BE 7E 00               853 	mov	r6,#0x00
                    00C0    854 	C$fb_lpc922.c$104$3$3 ==.
                            855 ;	../fb_lpc922.c:104: repeatflag=objno&0x20;
   00C0 EF                  856 	mov	a,r7
   00C1 A2 E5               857 	mov	c,acc[5]
   00C3 E4                  858 	clr	a
   00C4 33                  859 	rlc	a
   00C5 FC                  860 	mov	r4,a
   00C6 24 FF               861 	add	a,#0xff
   00C8 92*00               862 	mov	b1,c
                    00CA    863 	C$fb_lpc922.c$106$3$3 ==.
                            864 ;	../fb_lpc922.c:106: if(objno<128) {		// Multicast
   00CA BF 80 00            865 	cjne	r7,#0x80,00331$
   00CD                     866 00331$:
   00CD 40 03               867 	jc	00332$
   00CF 02s01rFA            868 	ljmp	00135$
   00D2                     869 00332$:
                    00D2    870 	C$fb_lpc922.c$107$1$1 ==.
                            871 ;	../fb_lpc922.c:107: type=(objno&0x40);	// bei Multicast ist type0 normal und type1 response telegramm
   00D2 C0 05               872 	push	ar5
   00D4 C0 06               873 	push	ar6
   00D6 EF                  874 	mov	a,r7
   00D7 23                  875 	rl	a
   00D8 23                  876 	rl	a
   00D9 54 01               877 	anl	a,#0x01
   00DB 24 FF               878 	add	a,#0xff
   00DD 92*00               879 	mov	b2,c
                    00DF    880 	C$fb_lpc922.c$108$4$4 ==.
                            881 ;	../fb_lpc922.c:108: objno&=0x1F;
   00DF 53 07 1F            882 	anl	ar7,#0x1F
                    00E2    883 	C$fb_lpc922.c$110$4$4 ==.
                            884 ;	../fb_lpc922.c:110: objvalue=read_obj_value(objno);		// Objektwert lesen
   00E2 8F 82               885 	mov	dpl,r7
   00E4 C0 07               886 	push	ar7
   00E6 C0 05               887 	push	ar5
   00E8 C0*00               888 	push	bits
   00EA 12s00r00            889 	lcall	_read_obj_value
   00ED AA 82               890 	mov	r2,dpl
   00EF AB 83               891 	mov	r3,dph
   00F1 AC F0               892 	mov	r4,b
   00F3 FE                  893 	mov	r6,a
   00F4 D0*00               894 	pop	bits
   00F6 D0 05               895 	pop	ar5
   00F8 D0 07               896 	pop	ar7
   00FA A8*00               897 	mov	r0,_bp
   00FC 08                  898 	inc	r0
   00FD A6 02               899 	mov	@r0,ar2
   00FF 08                  900 	inc	r0
   0100 A6 03               901 	mov	@r0,ar3
   0102 08                  902 	inc	r0
   0103 A6 04               903 	mov	@r0,ar4
   0105 08                  904 	inc	r0
   0106 A6 06               905 	mov	@r0,ar6
                    0108    906 	C$fb_lpc922.c$113$4$4 ==.
                            907 ;	../fb_lpc922.c:113: asspos=eeprom[ASSOCTABPTR]+1+2*objno;
   0108 90 1D 11            908 	mov	dptr,#(_eeprom + 0x0011)
   010B E4                  909 	clr	a
   010C 93                  910 	movc	a,@a+dptr
   010D FE                  911 	mov	r6,a
   010E 0E                  912 	inc	r6
   010F EF                  913 	mov	a,r7
   0110 2F                  914 	add	a,r7
   0111 FD                  915 	mov	r5,a
   0112 2E                  916 	add	a,r6
                    0113    917 	C$fb_lpc922.c$114$4$4 ==.
                            918 ;	../fb_lpc922.c:114: if(eeprom[asspos+1]==objno) gapos=eeprom[asspos];
   0113 FC                  919 	mov	r4,a
   0114 04                  920 	inc	a
   0115 90 1D 00            921 	mov	dptr,#_eeprom
   0118 93                  922 	movc	a,@a+dptr
   0119 FE                  923 	mov	r6,a
   011A B5 07 02            924 	cjne	a,ar7,00333$
   011D 80 06               925 	sjmp	00334$
   011F                     926 00333$:
   011F D0 06               927 	pop	ar6
   0121 D0 05               928 	pop	ar5
   0123 80 0F               929 	sjmp	00103$
   0125                     930 00334$:
   0125 D0 06               931 	pop	ar6
   0127 D0 05               932 	pop	ar5
   0129 8C 82               933 	mov	dpl,r4
   012B 75 83 1D            934 	mov	dph,#(_eeprom >> 8)
   012E E4                  935 	clr	a
   012F 93                  936 	movc	a,@a+dptr
   0130 FC                  937 	mov	r4,a
   0131 FD                  938 	mov	r5,a
   0132 7E 00               939 	mov	r6,#0x00
   0134                     940 00103$:
                    0134    941 	C$fb_lpc922.c$116$4$4 ==.
                            942 ;	../fb_lpc922.c:116: if (gapos!=0xFE) // wenn keine Gruppenadresse hinterlegt nix tun
   0134 BD FE 06            943 	cjne	r5,#0xFE,00335$
   0137 BE 00 03            944 	cjne	r6,#0x00,00335$
   013A 02s03r03            945 	ljmp	00136$
   013D                     946 00335$:
                    013D    947 	C$fb_lpc922.c$118$5$5 ==.
                            948 ;	../fb_lpc922.c:118: telegramm[0]=0xBC;
   013D 75*07 BC            949 	mov	_telegramm,#0xBC
                    0140    950 	C$fb_lpc922.c$119$5$5 ==.
                            951 ;	../fb_lpc922.c:119: telegramm[1]=eeprom[ADDRTAB+1];
   0140 90 1D 17            952 	mov	dptr,#(_eeprom + 0x0017)
   0143 E4                  953 	clr	a
   0144 93                  954 	movc	a,@a+dptr
   0145 FC                  955 	mov	r4,a
   0146 8C*08               956 	mov	(_telegramm + 0x0001),r4
                    0148    957 	C$fb_lpc922.c$120$5$5 ==.
                            958 ;	../fb_lpc922.c:120: telegramm[2]=eeprom[ADDRTAB+2];
   0148 90 1D 18            959 	mov	dptr,#(_eeprom + 0x0018)
   014B E4                  960 	clr	a
   014C 93                  961 	movc	a,@a+dptr
   014D FC                  962 	mov	r4,a
   014E 8C*09               963 	mov	(_telegramm + 0x0002),r4
                    0150    964 	C$fb_lpc922.c$121$5$5 ==.
                            965 ;	../fb_lpc922.c:121: telegramm[3]=eeprom[ADDRTAB+1+gapos*2];
   0150 ED                  966 	mov	a,r5
   0151 2D                  967 	add	a,r5
   0152 FD                  968 	mov	r5,a
   0153 24 17               969 	add	a,#0x17
   0155 90 1D 00            970 	mov	dptr,#_eeprom
   0158 93                  971 	movc	a,@a+dptr
   0159 FE                  972 	mov	r6,a
   015A 8E*0A               973 	mov	(_telegramm + 0x0003),r6
                    015C    974 	C$fb_lpc922.c$122$5$5 ==.
                            975 ;	../fb_lpc922.c:122: telegramm[4]=eeprom[ADDRTAB+2+gapos*2];
   015C 74 18               976 	mov	a,#0x18
   015E 2D                  977 	add	a,r5
   015F 90 1D 00            978 	mov	dptr,#_eeprom
   0162 93                  979 	movc	a,@a+dptr
   0163 FE                  980 	mov	r6,a
   0164 8E*0B               981 	mov	(_telegramm + 0x0004),r6
                    0166    982 	C$fb_lpc922.c$123$5$5 ==.
                            983 ;	../fb_lpc922.c:123: telegramm[6]=0x00;
   0166 75*0D 00            984 	mov	(_telegramm + 0x0006),#0x00
                    0169    985 	C$fb_lpc922.c$124$5$5 ==.
                            986 ;	../fb_lpc922.c:124: if (type) telegramm[7]=0x40;		// read_value_response Telegramm (angefordert)
   0169 30*00 05            987 	jnb	b2,00105$
   016C 75*0E 40            988 	mov	(_telegramm + 0x0007),#0x40
   016F 80 03               989 	sjmp	00106$
   0171                     990 00105$:
                    0171    991 	C$fb_lpc922.c$125$5$5 ==.
                            992 ;	../fb_lpc922.c:125: else telegramm[7]=0x80;				// write_value_request Telegramm (nicht angefordert)
   0171 75*0E 80            993 	mov	(_telegramm + 0x0007),#0x80
   0174                     994 00106$:
                    0174    995 	C$fb_lpc922.c$127$5$5 ==.
                            996 ;	../fb_lpc922.c:127: objtype=eeprom[eeprom[COMMSTABPTR]+objno+objno+objno+4];
   0174 90 1D 12            997 	mov	dptr,#(_eeprom + 0x0012)
   0177 E4                  998 	clr	a
   0178 93                  999 	movc	a,@a+dptr
   0179 2F                 1000 	add	a,r7
   017A 2F                 1001 	add	a,r7
   017B FE                 1002 	mov	r6,a
   017C 2F                 1003 	add	a,r7
   017D 24 04              1004 	add	a,#0x04
   017F 90 1D 00           1005 	mov	dptr,#_eeprom
   0182 93                 1006 	movc	a,@a+dptr
                    0183   1007 	C$fb_lpc922.c$129$5$5 ==.
                           1008 ;	../fb_lpc922.c:129: if(objtype>6) length=objtype-5; else length=1;
   0183 FE                 1009 	mov  r6,a
   0184 24 F9              1010 	add	a,#0xff - 0x06
   0186 50 06              1011 	jnc	00108$
   0188 EE                 1012 	mov	a,r6
   0189 24 FB              1013 	add	a,#0xFB
   018B FE                 1014 	mov	r6,a
   018C 80 02              1015 	sjmp	00109$
   018E                    1016 00108$:
   018E 7E 01              1017 	mov	r6,#0x01
   0190                    1018 00109$:
                    0190   1019 	C$fb_lpc922.c$130$5$5 ==.
                           1020 ;	../fb_lpc922.c:130: telegramm[5]=0xE0+length;
   0190 74 E0              1021 	mov	a,#0xE0
   0192 2E                 1022 	add	a,r6
   0193 F5*0C              1023 	mov	(_telegramm + 0x0005),a
                    0195   1024 	C$fb_lpc922.c$131$5$5 ==.
                           1025 ;	../fb_lpc922.c:131: if (length>1) telegramm[length+6]=objvalue; else telegramm[7]+=(objvalue&0x3F);
   0195 EE                 1026 	mov	a,r6
   0196 24 FE              1027 	add	a,#0xff - 0x01
   0198 50 0F              1028 	jnc	00111$
   019A 74 06              1029 	mov	a,#0x06
   019C 2E                 1030 	add	a,r6
   019D 24r07              1031 	add	a,#_telegramm
   019F F9                 1032 	mov	r1,a
   01A0 A8*00              1033 	mov	r0,_bp
   01A2 08                 1034 	inc	r0
   01A3 86 05              1035 	mov	ar5,@r0
   01A5 A7 05              1036 	mov	@r1,ar5
   01A7 80 10              1037 	sjmp	00112$
   01A9                    1038 00111$:
   01A9 A8*00              1039 	mov	r0,_bp
   01AB 08                 1040 	inc	r0
   01AC 74 3F              1041 	mov	a,#0x3F
   01AE 56                 1042 	anl	a,@r0
   01AF FA                 1043 	mov	r2,a
   01B0 E4                 1044 	clr	a
   01B1 FB                 1045 	mov	r3,a
   01B2 FC                 1046 	mov	r4,a
   01B3 FD                 1047 	mov	r5,a
   01B4 EA                 1048 	mov	a,r2
   01B5 25*0E              1049 	add	a,(_telegramm + 0x0007)
   01B7 F5*0E              1050 	mov	(_telegramm + 0x0007),a
   01B9                    1051 00112$:
                    01B9   1052 	C$fb_lpc922.c$132$5$5 ==.
                           1053 ;	../fb_lpc922.c:132: if (length>2) telegramm[length+5]=objvalue>>8;
   01B9 EE                 1054 	mov	a,r6
   01BA 24 FD              1055 	add	a,#0xff - 0x02
   01BC 50 0E              1056 	jnc	00114$
   01BE 74 05              1057 	mov	a,#0x05
   01C0 2E                 1058 	add	a,r6
   01C1 24r07              1059 	add	a,#_telegramm
   01C3 F9                 1060 	mov	r1,a
   01C4 A8*00              1061 	mov	r0,_bp
   01C6 08                 1062 	inc	r0
   01C7 08                 1063 	inc	r0
   01C8 86 05              1064 	mov	ar5,@r0
   01CA A7 05              1065 	mov	@r1,ar5
   01CC                    1066 00114$:
                    01CC   1067 	C$fb_lpc922.c$133$5$5 ==.
                           1068 ;	../fb_lpc922.c:133: if (length>3) telegramm[length+4]=objvalue>>16;
   01CC EE                 1069 	mov	a,r6
   01CD 24 FC              1070 	add	a,#0xff - 0x03
   01CF 50 0F              1071 	jnc	00116$
   01D1 74 04              1072 	mov	a,#0x04
   01D3 2E                 1073 	add	a,r6
   01D4 24r07              1074 	add	a,#_telegramm
   01D6 F9                 1075 	mov	r1,a
   01D7 A8*00              1076 	mov	r0,_bp
   01D9 08                 1077 	inc	r0
   01DA 08                 1078 	inc	r0
   01DB 08                 1079 	inc	r0
   01DC 86 05              1080 	mov	ar5,@r0
   01DE A7 05              1081 	mov	@r1,ar5
   01E0                    1082 00116$:
                    01E0   1083 	C$fb_lpc922.c$134$5$5 ==.
                           1084 ;	../fb_lpc922.c:134: if (length>4) telegramm[length+3]=objvalue>>24;
   01E0 EE                 1085 	mov	a,r6
   01E1 24 FB              1086 	add	a,#0xff - 0x04
   01E3 50 10              1087 	jnc	00118$
   01E5 74 03              1088 	mov	a,#0x03
   01E7 2E                 1089 	add	a,r6
   01E8 24r07              1090 	add	a,#_telegramm
   01EA F9                 1091 	mov	r1,a
   01EB A8*00              1092 	mov	r0,_bp
   01ED 08                 1093 	inc	r0
   01EE 08                 1094 	inc	r0
   01EF 08                 1095 	inc	r0
   01F0 08                 1096 	inc	r0
   01F1 86 06              1097 	mov	ar6,@r0
   01F3 A7 06              1098 	mov	@r1,ar6
   01F5                    1099 00118$:
                    01F5   1100 	C$fb_lpc922.c$136$5$5 ==.
                           1101 ;	../fb_lpc922.c:136: build_ok=1;
   01F5 D2*00              1102 	setb	b0
   01F7 02s03r03           1103 	ljmp	00136$
   01FA                    1104 00135$:
                    01FA   1105 	C$fb_lpc922.c$140$4$6 ==.
                           1106 ;	../fb_lpc922.c:140: telegramm[0]=0xB0;				// Control Byte
   01FA 75*07 B0           1107 	mov	_telegramm,#0xB0
                    01FD   1108 	C$fb_lpc922.c$141$4$6 ==.
                           1109 ;	../fb_lpc922.c:141: telegramm[1]=eeprom[ADDRTAB+1];	// Quelladresse ist phys. Adresse
   01FD 90 1D 17           1110 	mov	dptr,#(_eeprom + 0x0017)
   0200 E4                 1111 	clr	a
   0201 93                 1112 	movc	a,@a+dptr
   0202 FE                 1113 	mov	r6,a
   0203 8E*08              1114 	mov	(_telegramm + 0x0001),r6
                    0205   1115 	C$fb_lpc922.c$142$4$6 ==.
                           1116 ;	../fb_lpc922.c:142: telegramm[2]=eeprom[ADDRTAB+2];
   0205 90 1D 18           1117 	mov	dptr,#(_eeprom + 0x0018)
   0208 E4                 1118 	clr	a
   0209 93                 1119 	movc	a,@a+dptr
   020A FE                 1120 	mov	r6,a
   020B 8E*09              1121 	mov	(_telegramm + 0x0002),r6
                    020D   1122 	C$fb_lpc922.c$143$4$6 ==.
                           1123 ;	../fb_lpc922.c:143: telegramm[3]=conh;
   020D 85*00*0A           1124 	mov	(_telegramm + 0x0003),_conh
                    0210   1125 	C$fb_lpc922.c$144$4$6 ==.
                           1126 ;	../fb_lpc922.c:144: telegramm[4]=conl;
   0210 85*01*0B           1127 	mov	(_telegramm + 0x0004),_conl
                    0213   1128 	C$fb_lpc922.c$146$4$6 ==.
                           1129 ;	../fb_lpc922.c:146: switch(objno&0x1F) {
   0213 53 07 1F           1130 	anl	ar7,#0x1F
   0216 EF                 1131 	mov	a,r7
   0217 24 F8              1132 	add	a,#0xff - 0x07
   0219 50 03              1133 	jnc	00342$
   021B 02s03r01           1134 	ljmp	00133$
   021E                    1135 00342$:
   021E EF                 1136 	mov	a,r7
   021F 2F                 1137 	add	a,r7
   0220 2F                 1138 	add	a,r7
   0221 90s02r25           1139 	mov	dptr,#00343$
   0224 73                 1140 	jmp	@a+dptr
   0225                    1141 00343$:
   0225 02s03r01           1142 	ljmp	00133$
   0228 02s02r3D           1143 	ljmp	00121$
   022B 02s02r49           1144 	ljmp	00122$
   022E 02s02r60           1145 	ljmp	00123$
   0231 02s02r72           1146 	ljmp	00124$
   0234 02s02rD2           1147 	ljmp	00130$
   0237 02s02rDC           1148 	ljmp	00131$
   023A 02s02rF8           1149 	ljmp	00132$
                    023D   1150 	C$fb_lpc922.c$147$5$7 ==.
                           1151 ;	../fb_lpc922.c:147: case 1:	// NCD ACK Quittierung (129) mit Paketnummer vom Sender, nicht der Eigenen!!!
   023D                    1152 00121$:
                    023D   1153 	C$fb_lpc922.c$148$5$7 ==.
                           1154 ;	../fb_lpc922.c:148: telegramm[5]=0x60;					// DRL
   023D 75*0C 60           1155 	mov	(_telegramm + 0x0005),#0x60
                    0240   1156 	C$fb_lpc922.c$149$5$7 ==.
                           1157 ;	../fb_lpc922.c:149: telegramm[6]=senders_pcount + 0xC2;	// Bit 6,7(TCPI = 11 NCD Quittierung) und Bit 0,1 (10=ACK)
   0240 74 C2              1158 	mov	a,#0xC2
   0242 25*06              1159 	add	a,_senders_pcount
   0244 F5*0D              1160 	mov	(_telegramm + 0x0006),a
                    0246   1161 	C$fb_lpc922.c$150$5$7 ==.
                           1162 ;	../fb_lpc922.c:150: break;
   0246 02s03r01           1163 	ljmp	00133$
                    0249   1164 	C$fb_lpc922.c$151$5$7 ==.
                           1165 ;	../fb_lpc922.c:151: case 2:	// read mask response (130)
   0249                    1166 00122$:
                    0249   1167 	C$fb_lpc922.c$152$5$7 ==.
                           1168 ;	../fb_lpc922.c:152: telegramm[5]=0x63;					// DRL
   0249 75*0C 63           1169 	mov	(_telegramm + 0x0005),#0x63
                    024C   1170 	C$fb_lpc922.c$153$5$7 ==.
                           1171 ;	../fb_lpc922.c:153: telegramm[6]=pcount + 0x43;			// bei response immer eigene Paketnummer senden
   024C 74 43              1172 	mov	a,#0x43
   024E 25*02              1173 	add	a,_pcount
   0250 F5*0D              1174 	mov	(_telegramm + 0x0006),a
                    0252   1175 	C$fb_lpc922.c$154$5$7 ==.
                           1176 ;	../fb_lpc922.c:154: telegramm[7]=0x40;
   0252 75*0E 40           1177 	mov	(_telegramm + 0x0007),#0x40
                    0255   1178 	C$fb_lpc922.c$155$5$7 ==.
                           1179 ;	../fb_lpc922.c:155: telegramm[8]=0x00;                  // Medium Type 0 (TP1), FW Type 0
   0255 75*0F 00           1180 	mov	(_telegramm + 0x0008),#0x00
                    0258   1181 	C$fb_lpc922.c$156$5$7 ==.
                           1182 ;	../fb_lpc922.c:156: telegramm[9]=0x12;					// FW Version 1.2 (Maskenversion 1.2 = BCU1)
   0258 75*10 12           1183 	mov	(_telegramm + 0x0009),#0x12
                    025B   1184 	C$fb_lpc922.c$157$5$7 ==.
                           1185 ;	../fb_lpc922.c:157: inc_pcount=1;
   025B D2*0E              1186 	setb	_inc_pcount
                    025D   1187 	C$fb_lpc922.c$158$5$7 ==.
                           1188 ;	../fb_lpc922.c:158: break;
   025D 02s03r01           1189 	ljmp	00133$
                    0260   1190 	C$fb_lpc922.c$159$5$7 ==.
                           1191 ;	../fb_lpc922.c:159: case 3:	// read PA response (131)
   0260                    1192 00123$:
                    0260   1193 	C$fb_lpc922.c$160$5$7 ==.
                           1194 ;	../fb_lpc922.c:160: telegramm[3]=0x00;			// Zieladresse auf 0000, da Broadcast
   0260 75*0A 00           1195 	mov	(_telegramm + 0x0003),#0x00
                    0263   1196 	C$fb_lpc922.c$161$5$7 ==.
                           1197 ;	../fb_lpc922.c:161: telegramm[4]=0x00;
   0263 75*0B 00           1198 	mov	(_telegramm + 0x0004),#0x00
                    0266   1199 	C$fb_lpc922.c$162$5$7 ==.
                           1200 ;	../fb_lpc922.c:162: telegramm[5]=0xE1;			// DRL
   0266 75*0C E1           1201 	mov	(_telegramm + 0x0005),#0xE1
                    0269   1202 	C$fb_lpc922.c$163$5$7 ==.
                           1203 ;	../fb_lpc922.c:163: telegramm[6]=0x01;
   0269 75*0D 01           1204 	mov	(_telegramm + 0x0006),#0x01
                    026C   1205 	C$fb_lpc922.c$164$5$7 ==.
                           1206 ;	../fb_lpc922.c:164: telegramm[7]=0x40;
   026C 75*0E 40           1207 	mov	(_telegramm + 0x0007),#0x40
                    026F   1208 	C$fb_lpc922.c$165$5$7 ==.
                           1209 ;	../fb_lpc922.c:165: break;
   026F 02s03r01           1210 	ljmp	00133$
                    0272   1211 	C$fb_lpc922.c$166$5$7 ==.
                           1212 ;	../fb_lpc922.c:166: case 4:	// memory_read_response (132)
   0272                    1213 00124$:
                    0272   1214 	C$fb_lpc922.c$167$1$1 ==.
                           1215 ;	../fb_lpc922.c:167: for(n=0;n<mem_length;n++) {
   0272 7F 00              1216 	mov	r7,#0x00
   0274                    1217 00256$:
   0274 C3                 1218 	clr	c
   0275 EF                 1219 	mov	a,r7
   0276 95*03              1220 	subb	a,_mem_length
   0278 50 3C              1221 	jnc	00259$
                    027A   1222 	C$fb_lpc922.c$168$6$8 ==.
                           1223 ;	../fb_lpc922.c:168: if (mem_adrh==0) {
   027A E5*04              1224 	mov	a,_mem_adrh
   027C 70 26              1225 	jnz	00128$
                    027E   1226 	C$fb_lpc922.c$169$7$9 ==.
                           1227 ;	../fb_lpc922.c:169: telegramm[n+10]=0;//userram[mem_adrl+n];
   027E 74 0A              1228 	mov	a,#0x0A
   0280 2F                 1229 	add	a,r7
   0281 24r07              1230 	add	a,#_telegramm
   0283 F8                 1231 	mov	r0,a
   0284 76 00              1232 	mov	@r0,#0x00
                    0286   1233 	C$fb_lpc922.c$170$7$9 ==.
                           1234 ;	../fb_lpc922.c:170: if(mem_adrl+n==0x60) telegramm[n+10]=status60;	// ausser bei 0x60
   0286 AD*05              1235 	mov	r5,_mem_adrl
   0288 7E 00              1236 	mov	r6,#0x00
   028A 8F 03              1237 	mov	ar3,r7
   028C 7C 00              1238 	mov	r4,#0x00
   028E EB                 1239 	mov	a,r3
   028F 2D                 1240 	add	a,r5
   0290 FD                 1241 	mov	r5,a
   0291 EC                 1242 	mov	a,r4
   0292 3E                 1243 	addc	a,r6
   0293 FE                 1244 	mov	r6,a
   0294 BD 60 1C           1245 	cjne	r5,#0x60,00258$
   0297 BE 00 19           1246 	cjne	r6,#0x00,00258$
   029A 74 0A              1247 	mov	a,#0x0A
   029C 2F                 1248 	add	a,r7
   029D 24r07              1249 	add	a,#_telegramm
   029F F8                 1250 	mov	r0,a
   02A0 A6*2E              1251 	mov	@r0,_status60
   02A2 80 0F              1252 	sjmp	00258$
   02A4                    1253 00128$:
                    02A4   1254 	C$fb_lpc922.c$172$6$8 ==.
                           1255 ;	../fb_lpc922.c:172: else telegramm[n+10]=eeprom[mem_adrl+n];//else if (mem_adrh==1)
   02A4 74 0A              1256 	mov	a,#0x0A
   02A6 2F                 1257 	add	a,r7
   02A7 24r07              1258 	add	a,#_telegramm
   02A9 F9                 1259 	mov	r1,a
   02AA EF                 1260 	mov	a,r7
   02AB 25*05              1261 	add	a,_mem_adrl
   02AD 90 1D 00           1262 	mov	dptr,#_eeprom
   02B0 93                 1263 	movc	a,@a+dptr
   02B1 FE                 1264 	mov	r6,a
   02B2 F7                 1265 	mov	@r1,a
   02B3                    1266 00258$:
                    02B3   1267 	C$fb_lpc922.c$167$5$7 ==.
                           1268 ;	../fb_lpc922.c:167: for(n=0;n<mem_length;n++) {
   02B3 0F                 1269 	inc	r7
   02B4 80 BE              1270 	sjmp	00256$
   02B6                    1271 00259$:
                    02B6   1272 	C$fb_lpc922.c$175$5$7 ==.
                           1273 ;	../fb_lpc922.c:175: telegramm[5]=mem_length+0x63;		// DRL (Anzahl Bytes + 3)
   02B6 74 63              1274 	mov	a,#0x63
   02B8 25*03              1275 	add	a,_mem_length
   02BA F5*0C              1276 	mov	(_telegramm + 0x0005),a
                    02BC   1277 	C$fb_lpc922.c$176$5$7 ==.
                           1278 ;	../fb_lpc922.c:176: telegramm[6]=pcount|0x42;			// eigener Paketzaehler, TCPI und ersten beiden Befehlsbits
   02BC 74 42              1279 	mov	a,#0x42
   02BE 45*02              1280 	orl	a,_pcount
   02C0 F5*0D              1281 	mov	(_telegramm + 0x0006),a
                    02C2   1282 	C$fb_lpc922.c$177$5$7 ==.
                           1283 ;	../fb_lpc922.c:177: telegramm[7]=mem_length|0x40;		// letzten 2 Befehlsbits
   02C2 74 40              1284 	mov	a,#0x40
   02C4 45*03              1285 	orl	a,_mem_length
   02C6 F5*0E              1286 	mov	(_telegramm + 0x0007),a
                    02C8   1287 	C$fb_lpc922.c$178$5$7 ==.
                           1288 ;	../fb_lpc922.c:178: telegramm[8]=mem_adrh;
   02C8 85*04*0F           1289 	mov	(_telegramm + 0x0008),_mem_adrh
                    02CB   1290 	C$fb_lpc922.c$179$5$7 ==.
                           1291 ;	../fb_lpc922.c:179: telegramm[9]=mem_adrl;
   02CB 85*05*10           1292 	mov	(_telegramm + 0x0009),_mem_adrl
                    02CE   1293 	C$fb_lpc922.c$180$5$7 ==.
                           1294 ;	../fb_lpc922.c:180: inc_pcount=1;
   02CE D2*0E              1295 	setb	_inc_pcount
                    02D0   1296 	C$fb_lpc922.c$181$5$7 ==.
                           1297 ;	../fb_lpc922.c:181: break;
                    02D0   1298 	C$fb_lpc922.c$182$5$7 ==.
                           1299 ;	../fb_lpc922.c:182: case 5:	// T-disconnect (133)
   02D0 80 2F              1300 	sjmp	00133$
   02D2                    1301 00130$:
                    02D2   1302 	C$fb_lpc922.c$183$5$7 ==.
                           1303 ;	../fb_lpc922.c:183: telegramm[5]=0x60;
   02D2 75*0C 60           1304 	mov	(_telegramm + 0x0005),#0x60
                    02D5   1305 	C$fb_lpc922.c$184$5$7 ==.
                           1306 ;	../fb_lpc922.c:184: telegramm[6]=0x81;
   02D5 75*0D 81           1307 	mov	(_telegramm + 0x0006),#0x81
                    02D8   1308 	C$fb_lpc922.c$185$5$7 ==.
                           1309 ;	../fb_lpc922.c:185: connected=0;
   02D8 C2*0D              1310 	clr	_connected
                    02DA   1311 	C$fb_lpc922.c$186$5$7 ==.
                           1312 ;	../fb_lpc922.c:186: break;
                    02DA   1313 	C$fb_lpc922.c$188$5$7 ==.
                           1314 ;	../fb_lpc922.c:188: case 6: // READ_ADC_RESPONSE (134)
   02DA 80 25              1315 	sjmp	00133$
   02DC                    1316 00131$:
                    02DC   1317 	C$fb_lpc922.c$189$5$7 ==.
                           1318 ;	../fb_lpc922.c:189: telegramm[5]=0x64;                  // DRL
   02DC 75*0C 64           1319 	mov	(_telegramm + 0x0005),#0x64
                    02DF   1320 	C$fb_lpc922.c$190$5$7 ==.
                           1321 ;	../fb_lpc922.c:190: telegramm[6]=pcount |0x41;          // eigener Paketzaehler, TCPI und erstes Befehlsbit
   02DF 74 41              1322 	mov	a,#0x41
   02E1 45*02              1323 	orl	a,_pcount
   02E3 F5*0D              1324 	mov	(_telegramm + 0x0006),a
                    02E5   1325 	C$fb_lpc922.c$191$5$7 ==.
                           1326 ;	../fb_lpc922.c:191: telegramm[7]=mem_adrh |0x40;        // ARCRead Response for selected channel
   02E5 74 40              1327 	mov	a,#0x40
   02E7 45*04              1328 	orl	a,_mem_adrh
   02E9 F5*0E              1329 	mov	(_telegramm + 0x0007),a
                    02EB   1330 	C$fb_lpc922.c$192$5$7 ==.
                           1331 ;	../fb_lpc922.c:192: telegramm[8]=mem_adrl;              // Requested sample count
   02EB 85*05*0F           1332 	mov	(_telegramm + 0x0008),_mem_adrl
                    02EE   1333 	C$fb_lpc922.c$193$5$7 ==.
                           1334 ;	../fb_lpc922.c:193: telegramm[9]=0x05;                  // ADC1 Bus Voltage 0x0610 = 29.1V (ADC = U/0.1875)
   02EE 75*10 05           1335 	mov	(_telegramm + 0x0009),#0x05
                    02F1   1336 	C$fb_lpc922.c$194$5$7 ==.
                           1337 ;	../fb_lpc922.c:194: telegramm[10]=0xA0;                 // 0x0602=28.8V, 0x0605=28.9V, 0x0642=30V, 0x0648=30.2V
   02F1 75*11 A0           1338 	mov	(_telegramm + 0x000a),#0xA0
                    02F4   1339 	C$fb_lpc922.c$195$5$7 ==.
                           1340 ;	../fb_lpc922.c:195: inc_pcount=1;                       // ADC4 PEI Type 0x0610 = PEI 15, 0x05A0 = PEI 14
   02F4 D2*0E              1341 	setb	_inc_pcount
                    02F6   1342 	C$fb_lpc922.c$196$5$7 ==.
                           1343 ;	../fb_lpc922.c:196: break;
                    02F6   1344 	C$fb_lpc922.c$198$5$7 ==.
                           1345 ;	../fb_lpc922.c:198: case 7: // NCD ACK Quittierung (135) mit eigener Paketnummer
   02F6 80 09              1346 	sjmp	00133$
   02F8                    1347 00132$:
                    02F8   1348 	C$fb_lpc922.c$199$5$7 ==.
                           1349 ;	../fb_lpc922.c:199: telegramm[5]=0x60;                  // DRL
   02F8 75*0C 60           1350 	mov	(_telegramm + 0x0005),#0x60
                    02FB   1351 	C$fb_lpc922.c$200$5$7 ==.
                           1352 ;	../fb_lpc922.c:200: telegramm[6]=pcount + 0xC2;         // Bit 6,7(TCPI = 11 NCD Quittierung) und Bit 0,1 (10=ACK)
   02FB 74 C2              1353 	mov	a,#0xC2
   02FD 25*02              1354 	add	a,_pcount
   02FF F5*0D              1355 	mov	(_telegramm + 0x0006),a
                    0301   1356 	C$fb_lpc922.c$203$4$6 ==.
                           1357 ;	../fb_lpc922.c:203: }
   0301                    1358 00133$:
                    0301   1359 	C$fb_lpc922.c$204$4$6 ==.
                           1360 ;	../fb_lpc922.c:204: build_ok=1;
   0301 D2*00              1361 	setb	b0
   0303                    1362 00136$:
                    0303   1363 	C$fb_lpc922.c$206$3$3 ==.
                           1364 ;	../fb_lpc922.c:206: if(repeatflag) telegramm[0]&=0xDF;		// Wiederholungsbit loeschen fuer Wiederholtelegramm
   0303 30*00 06           1365 	jnb	b1,00138$
   0306 74 DF              1366 	mov	a,#0xDF
   0308 55*07              1367 	anl	a,_telegramm
   030A F5*07              1368 	mov	_telegramm,a
   030C                    1369 00138$:
                    030C   1370 	C$fb_lpc922.c$209$3$3 ==.
                           1371 ;	../fb_lpc922.c:209: if(build_ok){//(build_tel(tx_buffer[tx_nextsend])) {	// wenn Telegramm gebildet werden konnte
   030C 30*00 3D           1372 	jnb	b0,00147$
                    030F   1373 	C$fb_lpc922.c$210$4$10 ==.
                           1374 ;	../fb_lpc922.c:210: EX1=0; 				//Um zu vermeiden dass man in die Abfrage hinein-empfaengt
   030F C2 AA              1375 	clr	_IEN0_2
                    0311   1376 	C$fb_lpc922.c$211$4$10 ==.
                           1377 ;	../fb_lpc922.c:211: if(!fb_state) { 	//nur bilden wenn vorher kein rx_intit durch ext int kam
   0311 E5*2A              1378 	mov	a,_fb_state
   0313 70 32              1379 	jnz	00145$
                    0315   1380 	C$fb_lpc922.c$212$5$11 ==.
                           1381 ;	../fb_lpc922.c:212: if((tx_buffer[tx_nextsend]&0x20)==0) {	// wenn erstmaliges Senden des Objektes
   0315 E5*2D              1382 	mov	a,_tx_nextsend
   0317 24r1E              1383 	add	a,#_tx_buffer
   0319 F9                 1384 	mov	r1,a
   031A E7                 1385 	mov	a,@r1
   031B FF                 1386 	mov	r7,a
   031C 20 E5 07           1387 	jb	acc.5,00140$
                    031F   1388 	C$fb_lpc922.c$213$6$12 ==.
                           1389 ;	../fb_lpc922.c:213: tx_buffer[tx_nextsend]|=0x20;		// Bit fuer "wird gerade gesendet"
   031F 74 20              1390 	mov	a,#0x20
   0321 4F                 1391 	orl	a,r7
   0322 F7                 1392 	mov	@r1,a
                    0323   1393 	C$fb_lpc922.c$214$6$12 ==.
                           1394 ;	../fb_lpc922.c:214: repeat_count=0;						// Wiederholungszaehler fuer nicht geackte Telegramme
   0323 75*2B 00           1395 	mov	_repeat_count,#0x00
   0326                    1396 00140$:
                    0326   1397 	C$fb_lpc922.c$216$5$11 ==.
                           1398 ;	../fb_lpc922.c:216: if (repeat_count<4) init_tx();		// Senden starten
   0326 74 FC              1399 	mov	a,#0x100 - 0x04
   0328 25*2B              1400 	add	a,_repeat_count
   032A 40 05              1401 	jc	00142$
   032C 12s06r13           1402 	lcall	_init_tx
   032F 80 16              1403 	sjmp	00145$
   0331                    1404 00142$:
                    0331   1405 	C$fb_lpc922.c$218$6$13 ==.
                           1406 ;	../fb_lpc922.c:218: tx_nextsend++;
   0331 05*2D              1407 	inc	_tx_nextsend
                    0333   1408 	C$fb_lpc922.c$219$6$13 ==.
                           1409 ;	../fb_lpc922.c:219: tx_nextsend&=0x07;
   0333 53*2D 07           1410 	anl	_tx_nextsend,#0x07
                    0336   1411 	C$fb_lpc922.c$220$6$13 ==.
                           1412 ;	../fb_lpc922.c:220: wait_for_ack=0;
   0336 C2*0A              1413 	clr	_wait_for_ack
                    0338   1414 	C$fb_lpc922.c$221$6$13 ==.
                           1415 ;	../fb_lpc922.c:221: inc_pcount=0;
   0338 C2*0E              1416 	clr	_inc_pcount
                    033A   1417 	C$fb_lpc922.c$222$6$13 ==.
                           1418 ;	../fb_lpc922.c:222: init_rx();
   033A 12s05rE5           1419 	lcall	_init_rx
                    033D   1420 	C$fb_lpc922.c$223$6$13 ==.
                           1421 ;	../fb_lpc922.c:223: TR1=0;		// hier nicht noch einmal die ganze busfree Zeit warten
   033D C2 8E              1422 	clr	_TCON_6
                    033F   1423 	C$fb_lpc922.c$224$6$13 ==.
                           1424 ;	../fb_lpc922.c:224: TH1=0xF0;
   033F 75 8D F0           1425 	mov	_TH1,#0xF0
                    0342   1426 	C$fb_lpc922.c$225$6$13 ==.
                           1427 ;	../fb_lpc922.c:225: TL1=0x00;
   0342 75 8B 00           1428 	mov	_TL1,#0x00
                    0345   1429 	C$fb_lpc922.c$226$6$13 ==.
                           1430 ;	../fb_lpc922.c:226: TR1=1;
   0345 D2 8E              1431 	setb	_TCON_6
   0347                    1432 00145$:
                    0347   1433 	C$fb_lpc922.c$229$4$10 ==.
                           1434 ;	../fb_lpc922.c:229: EX1=1;	// ext1 int einschalten falls Empfang...
   0347 D2 AA              1435 	setb	_IEN0_2
   0349 02s05rC1           1436 	ljmp	00255$
   034C                    1437 00147$:
                    034C   1438 	C$fb_lpc922.c$232$4$14 ==.
                           1439 ;	../fb_lpc922.c:232: tx_nextsend++; //hier Zeiger erhoehen wenn Telegramm nicht gebildet werden konnte
   034C 05*2D              1440 	inc	_tx_nextsend
                    034E   1441 	C$fb_lpc922.c$233$4$14 ==.
                           1442 ;	../fb_lpc922.c:233: tx_nextsend&=0x07;
   034E 53*2D 07           1443 	anl	_tx_nextsend,#0x07
   0351 02s05rC1           1444 	ljmp	00255$
   0354                    1445 00150$:
                    0354   1446 	C$fb_lpc922.c$237$3$15 ==.
                           1447 ;	../fb_lpc922.c:237: TR1=0;		// nichts mehr zu tun, also statemachine stoppen
   0354 C2 8E              1448 	clr	_TCON_6
                    0356   1449 	C$fb_lpc922.c$238$3$15 ==.
                           1450 ;	../fb_lpc922.c:238: EX1=1;		// sicherstellen, dass ext. Int. 1 aktiv ist
   0356 D2 AA              1451 	setb	_IEN0_2
                    0358   1452 	C$fb_lpc922.c$240$2$2 ==.
                           1453 ;	../fb_lpc922.c:240: break;
   0358 02s05rC1           1454 	ljmp	00255$
                    035B   1455 	C$fb_lpc922.c$243$2$2 ==.
                           1456 ;	../fb_lpc922.c:243: case 2: // T=75us
   035B                    1457 00152$:
                    035B   1458 	C$fb_lpc922.c$244$2$2 ==.
                           1459 ;	../fb_lpc922.c:244: fbrx_bit=!IE1;				// Flipflop des ext. Int. 1 auslesen, ist 1 bei fallender Flanke am Pin
   035B A2 8B              1460 	mov	c,_TCON_3
   035D B3                 1461 	cpl	c
   035E 92*00              1462 	mov	b0,c
                    0360   1463 	C$fb_lpc922.c$245$2$2 ==.
                           1464 ;	../fb_lpc922.c:245: IE1=0;						// Flipflop zuruecksetzen
   0360 C2 8B              1465 	clr	_TCON_3
                    0362   1466 	C$fb_lpc922.c$246$2$2 ==.
                           1467 ;	../fb_lpc922.c:246: fb_state=3;// naechster state: 3
   0362 75*2A 03           1468 	mov	_fb_state,#0x03
                    0365   1469 	C$fb_lpc922.c$247$2$2 ==.
                           1470 ;	../fb_lpc922.c:247: TH1=0;// reload auf 70µs (zeit swischen state 3 und 2)
   0365 75 8D 00           1471 	mov	_TH1,#0x00
                    0368   1472 	C$fb_lpc922.c$248$2$2 ==.
                           1473 ;	../fb_lpc922.c:248: if(fb_pattern==0) {			// fb_pattern=0 bedeutet, dass bisher nur das Startbit empfangen wurde
   0368 E5*29              1474 	mov	a,_fb_pattern
   036A 70 0A              1475 	jnz	00187$
                    036C   1476 	C$fb_lpc922.c$249$3$16 ==.
                           1477 ;	../fb_lpc922.c:249: fb_pattern=1;			// 70us nach Startbit, als naecstes kommt Datenbit 0
   036C 75*29 01           1478 	mov	_fb_pattern,#0x01
                    036F   1479 	C$fb_lpc922.c$250$3$16 ==.
                           1480 ;	../fb_lpc922.c:250: ack=0;					// Empfang eines neuen Bytes, also ack/nack Flags zuruecksetzen
   036F C2*03              1481 	clr	_ack
                    0371   1482 	C$fb_lpc922.c$251$3$16 ==.
                           1483 ;	../fb_lpc922.c:251: nack=0;
   0371 C2*04              1484 	clr	_nack
   0373 02s05rC1           1485 	ljmp	00255$
   0376                    1486 00187$:
                    0376   1487 	C$fb_lpc922.c$254$3$17 ==.
                           1488 ;	../fb_lpc922.c:254: if(fb_pattern<129) {					// Daten-Bit LSB first
   0376 74 7F              1489 	mov	a,#0x100 - 0x81
   0378 25*29              1490 	add	a,_fb_pattern
   037A 40 1C              1491 	jc	00184$
                    037C   1492 	C$fb_lpc922.c$255$4$18 ==.
                           1493 ;	../fb_lpc922.c:255: if(fbrx_bit) {
   037C 30*00 08           1494 	jnb	b0,00154$
                    037F   1495 	C$fb_lpc922.c$256$5$19 ==.
                           1496 ;	../fb_lpc922.c:256: fb_parity=!fb_parity;			// Paritybit berechnen
   037F B2*02              1497 	cpl	_fb_parity
                    0381   1498 	C$fb_lpc922.c$257$5$19 ==.
                           1499 ;	../fb_lpc922.c:257: fbrx_byte+=fb_pattern;			// Datenbit speichern
   0381 E5*29              1500 	mov	a,_fb_pattern
   0383 25*28              1501 	add	a,_fbrx_byte
   0385 F5*28              1502 	mov	_fbrx_byte,a
   0387                    1503 00154$:
                    0387   1504 	C$fb_lpc922.c$259$4$18 ==.
                           1505 ;	../fb_lpc922.c:259: fb_pattern=fb_pattern<<1;			// naechstes Bit
   0387 E5*29              1506 	mov	a,_fb_pattern
   0389 25*29              1507 	add	a,_fb_pattern
                    038B   1508 	C$fb_lpc922.c$260$4$18 ==.
                           1509 ;	../fb_lpc922.c:260: if(fb_pattern==0) fb_pattern=129;	// alle Daten-Bits gelesen, Parity-Bit folgt
   038B F5*29              1510 	mov	_fb_pattern,a
   038D 60 03              1511 	jz	00356$
   038F 02s05rC1           1512 	ljmp	00255$
   0392                    1513 00356$:
   0392 75*29 81           1514 	mov	_fb_pattern,#0x81
   0395 02s05rC1           1515 	ljmp	00255$
   0398                    1516 00184$:
                    0398   1517 	C$fb_lpc922.c$263$4$20 ==.
                           1518 ;	../fb_lpc922.c:263: TR1=0;
   0398 C2 8E              1519 	clr	_TCON_6
                    039A   1520 	C$fb_lpc922.c$264$4$20 ==.
                           1521 ;	../fb_lpc922.c:264: TF1=0; //pruefen ob erforderlich!!!
   039A C2 8F              1522 	clr	_TCON_7
                    039C   1523 	C$fb_lpc922.c$265$4$20 ==.
                           1524 ;	../fb_lpc922.c:265: if(fb_parity==fbrx_bit) {				// Parity-Bit OK
   039C A2*02              1525 	mov	c,_fb_parity
   039E 20*00 01           1526 	jb	b0,00357$
   03A1 B3                 1527 	cpl	c
   03A2                    1528 00357$:
   03A2 50 2C              1529 	jnc	00168$
                    03A4   1530 	C$fb_lpc922.c$266$5$21 ==.
                           1531 ;	../fb_lpc922.c:266: if (telpos==0) {						// erstes empfangenes Byte
   03A4 E5*26              1532 	mov	a,_telpos
   03A6 70 0E              1533 	jnz	00162$
                    03A8   1534 	C$fb_lpc922.c$267$6$22 ==.
                           1535 ;	../fb_lpc922.c:267: if (fbrx_byte==0xCC) ack=1;				// ACK empfangen
   03A8 74 CC              1536 	mov	a,#0xCC
   03AA B5*28 02           1537 	cjne	a,_fbrx_byte,00158$
   03AD D2*03              1538 	setb	_ack
   03AF                    1539 00158$:
                    03AF   1540 	C$fb_lpc922.c$268$6$22 ==.
                           1541 ;	../fb_lpc922.c:268: if (fbrx_byte==0x0C) nack=1;			// NACK empfangen
   03AF 74 0C              1542 	mov	a,#0x0C
   03B1 B5*28 02           1543 	cjne	a,_fbrx_byte,00162$
   03B4 D2*04              1544 	setb	_nack
   03B6                    1545 00162$:
                    03B6   1546 	C$fb_lpc922.c$270$5$21 ==.
                           1547 ;	../fb_lpc922.c:270: if (!ack && !nack && telpos<=22) {			// Datenbyte empfangen, pointer auf Arraygroesse begrenzen
   03B6 20*03 19           1548 	jb	_ack,00169$
   03B9 20*04 16           1549 	jb	_nack,00169$
   03BC E5*26              1550 	mov	a,_telpos
   03BE 24 E9              1551 	add	a,#0xff - 0x16
   03C0 40 10              1552 	jc	00169$
                    03C2   1553 	C$fb_lpc922.c$271$6$23 ==.
                           1554 ;	../fb_lpc922.c:271: telegramm[telpos]=fbrx_byte;			// Byte speichern
   03C2 E5*26              1555 	mov	a,_telpos
   03C4 24r07              1556 	add	a,#_telegramm
   03C6 F8                 1557 	mov	r0,a
                    03C7   1558 	C$fb_lpc922.c$272$6$23 ==.
                           1559 ;	../fb_lpc922.c:272: cs^=fbrx_byte;							// Checksum berechnen
   03C7 E5*28              1560 	mov	a,_fbrx_byte
   03C9 F6                 1561 	mov	@r0,a
   03CA 62*27              1562 	xrl	_cs,a
                    03CC   1563 	C$fb_lpc922.c$273$6$23 ==.
                           1564 ;	../fb_lpc922.c:273: telpos++;								// Telegrammzeiger erhoehen
   03CC 05*26              1565 	inc	_telpos
   03CE 80 02              1566 	sjmp	00169$
   03D0                    1567 00168$:
                    03D0   1568 	C$fb_lpc922.c$276$4$20 ==.
                           1569 ;	../fb_lpc922.c:276: else parity_ok=0;						// Parity Error
   03D0 C2*00              1570 	clr	_parity_ok
   03D2                    1571 00169$:
                    03D2   1572 	C$fb_lpc922.c$278$4$20 ==.
                           1573 ;	../fb_lpc922.c:278: if (wait_for_ack) {						// es wird ein ACK erwartet
                    03D2   1574 	C$fb_lpc922.c$279$5$24 ==.
                           1575 ;	../fb_lpc922.c:279: wait_for_ack=0;							// Flag zurücksetzen, da wir es ja gerade abarbeiten
   03D2 10*0A 02           1576 	jbc	_wait_for_ack,00367$
   03D5 80 1D              1577 	sjmp	00181$
   03D7                    1578 00367$:
                    03D7   1579 	C$fb_lpc922.c$280$5$24 ==.
                           1580 ;	../fb_lpc922.c:280: if (ack && parity_ok) {					// ACK empfangen und auch erwartet
   03D7 30*03 14           1581 	jnb	_ack,00173$
   03DA 30*00 11           1582 	jnb	_parity_ok,00173$
                    03DD   1583 	C$fb_lpc922.c$281$6$25 ==.
                           1584 ;	../fb_lpc922.c:281: repeat_count=4;						// keine Wiederholtelegramme mehr senden
   03DD 75*2B 04           1585 	mov	_repeat_count,#0x04
                    03E0   1586 	C$fb_lpc922.c$282$6$25 ==.
                           1587 ;	../fb_lpc922.c:282: if(inc_pcount) {
                    03E0   1588 	C$fb_lpc922.c$283$7$26 ==.
                           1589 ;	../fb_lpc922.c:283: inc_pcount=0;
   03E0 10*0E 02           1590 	jbc	_inc_pcount,00370$
   03E3 80 09              1591 	sjmp	00173$
   03E5                    1592 00370$:
                    03E5   1593 	C$fb_lpc922.c$284$7$26 ==.
                           1594 ;	../fb_lpc922.c:284: pcount+=4;
   03E5 E5*02              1595 	mov	a,_pcount
   03E7 24 04              1596 	add	a,#0x04
   03E9 F5*02              1597 	mov	_pcount,a
                    03EB   1598 	C$fb_lpc922.c$285$7$26 ==.
                           1599 ;	../fb_lpc922.c:285: pcount&=0x3C;
   03EB 53*02 3C           1600 	anl	_pcount,#0x3C
   03EE                    1601 00173$:
                    03EE   1602 	C$fb_lpc922.c$288$5$24 ==.
                           1603 ;	../fb_lpc922.c:288: init_rx();
   03EE 12s05rE5           1604 	lcall	_init_rx
   03F1 02s05rC1           1605 	ljmp	00255$
   03F4                    1606 00181$:
                    03F4   1607 	C$fb_lpc922.c$291$5$27 ==.
                           1608 ;	../fb_lpc922.c:291: if (parity_ok && (!ack && !nack)) {		// ganz normales Datenbyte
   03F4 30*00 1E           1609 	jnb	_parity_ok,00176$
   03F7 20*03 1B           1610 	jb	_ack,00176$
   03FA 20*04 18           1611 	jb	_nack,00176$
                    03FD   1612 	C$fb_lpc922.c$292$6$28 ==.
                           1613 ;	../fb_lpc922.c:292: TMOD=(TMOD & 0x0F) +0x10;			// Timer 1 als 16-Bit Timer
   03FD 74 0F              1614 	mov	a,#0x0F
   03FF 55 89              1615 	anl	a,_TMOD
   0401 24 10              1616 	add	a,#0x10
   0403 F5 89              1617 	mov	_TMOD,a
                    0405   1618 	C$fb_lpc922.c$293$6$28 ==.
                           1619 ;	../fb_lpc922.c:293: TH1=0xFA;//0xFA;							// Timer 1 auf Timeout-Position setzen (370us)
   0405 75 8D FA           1620 	mov	_TH1,#0xFA
                    0408   1621 	C$fb_lpc922.c$294$6$28 ==.
                           1622 ;	../fb_lpc922.c:294: TL1=0x70;//4f 0xAB; (bis hierher sinds 91Âµs)
   0408 75 8B 70           1623 	mov	_TL1,#0x70
                    040B   1624 	C$fb_lpc922.c$295$6$28 ==.
                           1625 ;	../fb_lpc922.c:295: TR1=1;
   040B D2 8E              1626 	setb	_TCON_6
                    040D   1627 	C$fb_lpc922.c$296$6$28 ==.
                           1628 ;	../fb_lpc922.c:296: fb_state=4;							// naechster state: timeout = Telegramm fertig
   040D 75*2A 04           1629 	mov	_fb_state,#0x04
                    0410   1630 	C$fb_lpc922.c$297$6$28 ==.
                           1631 ;	../fb_lpc922.c:297: EX1=1;								// int1 aktiv, falls noch ein Byte kommt
   0410 D2 AA              1632 	setb	_IEN0_2
   0412 02s05rC1           1633 	ljmp	00255$
   0415                    1634 00176$:
                    0415   1635 	C$fb_lpc922.c$299$5$27 ==.
                           1636 ;	../fb_lpc922.c:299: else init_rx();							// irgendwas empfangen
   0415 12s05rE5           1637 	lcall	_init_rx
                    0418   1638 	C$fb_lpc922.c$303$2$2 ==.
                           1639 ;	../fb_lpc922.c:303: break;
   0418 02s05rC1           1640 	ljmp	00255$
                    041B   1641 	C$fb_lpc922.c$305$2$2 ==.
                           1642 ;	../fb_lpc922.c:305: case 3: // T=104us=0us
   041B                    1643 00189$:
                    041B   1644 	C$fb_lpc922.c$306$2$2 ==.
                           1645 ;	../fb_lpc922.c:306: TH1=128;// reload auf 35Âµs (Zeit zwischen State 2 und 3)
   041B 75 8D 80           1646 	mov	_TH1,#0x80
                    041E   1647 	C$fb_lpc922.c$307$2$2 ==.
                           1648 ;	../fb_lpc922.c:307: fb_state=2;//1
   041E 75*2A 02           1649 	mov	_fb_state,#0x02
                    0421   1650 	C$fb_lpc922.c$308$2$2 ==.
                           1651 ;	../fb_lpc922.c:308: break;
   0421 02s05rC1           1652 	ljmp	00255$
                    0424   1653 	C$fb_lpc922.c$310$2$2 ==.
                           1654 ;	../fb_lpc922.c:310: case 4:	//	Timeout, d.h. Telegramm-Ende
   0424                    1655 00190$:
                    0424   1656 	C$fb_lpc922.c$311$2$2 ==.
                           1657 ;	../fb_lpc922.c:311: if (auto_ack && telpos>7) {//>4		// wenn ACK/NACK gesendet werden soll und Telegramm zumindest 7 Bytes hat, da sonst ein NACK wenig Sinn macht
   0424 20*08 03           1658 	jb	_auto_ack,00374$
   0427 02s04rA8           1659 	ljmp	00208$
   042A                    1660 00374$:
   042A E5*26              1661 	mov	a,_telpos
   042C 24 F8              1662 	add	a,#0xff - 0x07
   042E 50 78              1663 	jnc	00208$
                    0430   1664 	C$fb_lpc922.c$312$3$29 ==.
                           1665 ;	../fb_lpc922.c:312: TR1=0;
   0430 C2 8E              1666 	clr	_TCON_6
                    0432   1667 	C$fb_lpc922.c$313$3$29 ==.
                           1668 ;	../fb_lpc922.c:313: TMOD=(TMOD & 0x0F) +0x10;	// Timer 1 als 16-Bit Timer
   0432 74 0F              1669 	mov	a,#0x0F
   0434 55 89              1670 	anl	a,_TMOD
   0436 24 10              1671 	add	a,#0x10
   0438 F5 89              1672 	mov	_TMOD,a
                    043A   1673 	C$fb_lpc922.c$314$3$29 ==.
                           1674 ;	../fb_lpc922.c:314: TH1=0xEF;					// Timer 1 auf ACK / NACK -Position setzen (15 Bit Pause = 2708Âµs (26 Bit) nach Beginn Startbit vom letzten Datenbyte)
   043A 75 8D EF           1675 	mov	_TH1,#0xEF
                    043D   1676 	C$fb_lpc922.c$315$3$29 ==.
                           1677 ;	../fb_lpc922.c:315: TL1=0x42;
   043D 75 8B 42           1678 	mov	_TL1,#0x42
                    0440   1679 	C$fb_lpc922.c$316$3$29 ==.
                           1680 ;	../fb_lpc922.c:316: TR1=1;
   0440 D2 8E              1681 	setb	_TCON_6
                    0442   1682 	C$fb_lpc922.c$317$3$29 ==.
                           1683 ;	../fb_lpc922.c:317: its_me=0;//transparency; // indiziert, ob dieses Geraet adressiert wurde, bei transparecy=1 immer
   0442 C2*05              1684 	clr	_its_me
                    0444   1685 	C$fb_lpc922.c$318$3$29 ==.
                           1686 ;	../fb_lpc922.c:318: if(telegramm[5]&0x80) {
   0444 E5*0C              1687 	mov	a,(_telegramm + 0x0005)
   0446 30 E7 1F           1688 	jnb	acc.7,00200$
                    0449   1689 	C$fb_lpc922.c$319$4$30 ==.
                           1690 ;	../fb_lpc922.c:319: if (gapos_in_gat(telegramm[3],telegramm[4])!=0xFF) its_me=1;	// Gruppenadresse
   0449 85*0A 82           1691 	mov	dpl,(_telegramm + 0x0003)
   044C C0*0B              1692 	push	(_telegramm + 0x0004)
   044E 12s06r5D           1693 	lcall	_gapos_in_gat
   0451 AF 82              1694 	mov	r7,dpl
   0453 15 81              1695 	dec	sp
   0455 BF FF 02           1696 	cjne	r7,#0xFF,00377$
   0458 80 02              1697 	sjmp	00192$
   045A                    1698 00377$:
   045A D2*05              1699 	setb	_its_me
   045C                    1700 00192$:
                    045C   1701 	C$fb_lpc922.c$320$4$30 ==.
                           1702 ;	../fb_lpc922.c:320: if (telegramm[3]==0 && telegramm[4]==0) its_me=1;				// Broadcast
   045C E5*0A              1703 	mov	a,(_telegramm + 0x0003)
   045E 70 1C              1704 	jnz	00201$
   0460 E5*0B              1705 	mov	a,(_telegramm + 0x0004)
   0462 70 18              1706 	jnz	00201$
   0464 D2*05              1707 	setb	_its_me
   0466 80 14              1708 	sjmp	00201$
   0468                    1709 00200$:
                    0468   1710 	C$fb_lpc922.c$322$3$29 ==.
                           1711 ;	../fb_lpc922.c:322: else if(telegramm[3]==eeprom[ADDRTAB+1] && telegramm[4]==eeprom[ADDRTAB+2]) its_me=1;	// phys. Adresse
   0468 90 1D 17           1712 	mov	dptr,#(_eeprom + 0x0017)
   046B E4                 1713 	clr	a
   046C 93                 1714 	movc	a,@a+dptr
   046D FF                 1715 	mov	r7,a
   046E B5*0A 0B           1716 	cjne	a,(_telegramm + 0x0003),00201$
   0471 90 1D 18           1717 	mov	dptr,#(_eeprom + 0x0018)
   0474 E4                 1718 	clr	a
   0475 93                 1719 	movc	a,@a+dptr
   0476 FF                 1720 	mov	r7,a
   0477 B5*0B 02           1721 	cjne	a,(_telegramm + 0x0004),00201$
   047A D2*05              1722 	setb	_its_me
   047C                    1723 00201$:
                    047C   1724 	C$fb_lpc922.c$325$3$29 ==.
                           1725 ;	../fb_lpc922.c:325: if ((cs==0xFF)&&((telegramm[5]&0x0F)+8)== (telpos))
   047C 74 FF              1726 	mov	a,#0xFF
   047E B5*27 21           1727 	cjne	a,_cs,00205$
   0481 74 0F              1728 	mov	a,#0x0F
   0483 55*0C              1729 	anl	a,(_telegramm + 0x0005)
   0485 FF                 1730 	mov	r7,a
   0486 7E 00              1731 	mov	r6,#0x00
   0488 74 08              1732 	mov	a,#0x08
   048A 2F                 1733 	add	a,r7
   048B FF                 1734 	mov	r7,a
   048C E4                 1735 	clr	a
   048D 3E                 1736 	addc	a,r6
   048E FE                 1737 	mov	r6,a
   048F AC*26              1738 	mov	r4,_telpos
   0491 7D 00              1739 	mov	r5,#0x00
   0493 EF                 1740 	mov	a,r7
   0494 B5 04 0B           1741 	cjne	a,ar4,00205$
   0497 EE                 1742 	mov	a,r6
   0498 B5 05 07           1743 	cjne	a,ar5,00205$
                    049B   1744 	C$fb_lpc922.c$327$4$31 ==.
                           1745 ;	../fb_lpc922.c:327: telegramm_ok=1;
   049B D2*0F              1746 	setb	_telegramm_ok
                    049D   1747 	C$fb_lpc922.c$328$4$31 ==.
                           1748 ;	../fb_lpc922.c:328: if(its_me)tel_arrived=1;//&&(telegramm[5]&0x0F== telpos-8)
   049D 30*05 02           1749 	jnb	_its_me,00205$
   04A0 D2*06              1750 	setb	_tel_arrived
   04A2                    1751 00205$:
                    04A2   1752 	C$fb_lpc922.c$330$3$29 ==.
                           1753 ;	../fb_lpc922.c:330: fb_state=5;					// naechster state: ACK-Position erreicht
   04A2 75*2A 05           1754 	mov	_fb_state,#0x05
   04A5 02s05rC1           1755 	ljmp	00255$
   04A8                    1756 00208$:
                    04A8   1757 	C$fb_lpc922.c$335$3$32 ==.
                           1758 ;	../fb_lpc922.c:335: init_rx();						// wieder in den Empfang zurück
   04A8 12s05rE5           1759 	lcall	_init_rx
                    04AB   1760 	C$fb_lpc922.c$337$2$2 ==.
                           1761 ;	../fb_lpc922.c:337: break;
   04AB 02s05rC1           1762 	ljmp	00255$
                    04AE   1763 	C$fb_lpc922.c$339$2$2 ==.
                           1764 ;	../fb_lpc922.c:339: case 5:	// ACK-Position erreicht
   04AE                    1765 00211$:
                    04AE   1766 	C$fb_lpc922.c$340$2$2 ==.
                           1767 ;	../fb_lpc922.c:340: TR1=0;
   04AE C2 8E              1768 	clr	_TCON_6
                    04B0   1769 	C$fb_lpc922.c$341$2$2 ==.
                           1770 ;	../fb_lpc922.c:341: if (telegramm_ok) {	// Checksum und Laenge OK
   04B0 30*0F 13           1771 	jnb	_telegramm_ok,00216$
                    04B3   1772 	C$fb_lpc922.c$342$3$33 ==.
                           1773 ;	../fb_lpc922.c:342: if (its_me) {					// Gerät adressiert
   04B3 30*05 0A           1774 	jnb	_its_me,00213$
                    04B6   1775 	C$fb_lpc922.c$343$4$34 ==.
                           1776 ;	../fb_lpc922.c:343: send_ack=1;
   04B6 D2*0B              1777 	setb	_send_ack
                    04B8   1778 	C$fb_lpc922.c$344$4$34 ==.
                           1779 ;	../fb_lpc922.c:344: init_tx();						// Senden initiieren
   04B8 12s06r13           1780 	lcall	_init_tx
                    04BB   1781 	C$fb_lpc922.c$345$4$34 ==.
                           1782 ;	../fb_lpc922.c:345: wait_for_ack=0;					// bei ACK senden nicht erneut auf ACK warten
   04BB C2*0A              1783 	clr	_wait_for_ack
   04BD 02s05rC1           1784 	ljmp	00255$
   04C0                    1785 00213$:
                    04C0   1786 	C$fb_lpc922.c$347$3$33 ==.
                           1787 ;	../fb_lpc922.c:347: else init_rx();					// Gerät nicht adressiert, also zurück zu Empfang
   04C0 12s05rE5           1788 	lcall	_init_rx
   04C3 02s05rC1           1789 	ljmp	00255$
   04C6                    1790 00216$:
                    04C6   1791 	C$fb_lpc922.c$350$3$35 ==.
                           1792 ;	../fb_lpc922.c:350: send_nack=1;
   04C6 D2*0C              1793 	setb	_send_nack
                    04C8   1794 	C$fb_lpc922.c$351$3$35 ==.
                           1795 ;	../fb_lpc922.c:351: init_tx();
   04C8 12s06r13           1796 	lcall	_init_tx
                    04CB   1797 	C$fb_lpc922.c$352$3$35 ==.
                           1798 ;	../fb_lpc922.c:352: wait_for_ack=0;					// bei NACK senden nicht erneut auf ACK warten
   04CB C2*0A              1799 	clr	_wait_for_ack
                    04CD   1800 	C$fb_lpc922.c$354$2$2 ==.
                           1801 ;	../fb_lpc922.c:354: break;
   04CD 02s05rC1           1802 	ljmp	00255$
                    04D0   1803 	C$fb_lpc922.c$358$2$2 ==.
                           1804 ;	../fb_lpc922.c:358: case 10:	// Byte Senden, T=0us
   04D0                    1805 00218$:
                    04D0   1806 	C$fb_lpc922.c$359$2$2 ==.
                           1807 ;	../fb_lpc922.c:359: send_byte=telegramm[telpos];
   04D0 E5*26              1808 	mov	a,_telpos
   04D2 24r07              1809 	add	a,#_telegramm
   04D4 F9                 1810 	mov	r1,a
   04D5 87 07              1811 	mov	ar7,@r1
                    04D7   1812 	C$fb_lpc922.c$360$2$2 ==.
                           1813 ;	../fb_lpc922.c:360: if (send_ack) send_byte=0xCC;
   04D7 30*0B 02           1814 	jnb	_send_ack,00220$
   04DA 7F CC              1815 	mov	r7,#0xCC
   04DC                    1816 00220$:
                    04DC   1817 	C$fb_lpc922.c$361$2$2 ==.
                           1818 ;	../fb_lpc922.c:361: if (send_nack) send_byte=0x0C;
   04DC 30*0C 02           1819 	jnb	_send_nack,00222$
   04DF 7F 0C              1820 	mov	r7,#0x0C
   04E1                    1821 00222$:
                    04E1   1822 	C$fb_lpc922.c$362$2$2 ==.
                           1823 ;	../fb_lpc922.c:362: EX1=0;					// Empfang verhindern
   04E1 C2 AA              1824 	clr	_IEN0_2
                    04E3   1825 	C$fb_lpc922.c$363$2$2 ==.
                           1826 ;	../fb_lpc922.c:363: if(fb_state==10){
   04E3 74 0A              1827 	mov	a,#0x0A
   04E5 B5*2A 02           1828 	cjne	a,_fb_state,00393$
   04E8 80 03              1829 	sjmp	00394$
   04EA                    1830 00393$:
   04EA 02s05rC1           1831 	ljmp	00255$
   04ED                    1832 00394$:
                    04ED   1833 	C$fb_lpc922.c$364$3$36 ==.
                           1834 ;	../fb_lpc922.c:364: if (fb_pattern<=128) {			// Startbit und Datenbits (pattern=0:startbit, 1 2 4 8 .. 128 Datenbits, 129 parity)
   04ED E5*29              1835 	mov	a,_fb_pattern
   04EF 24 7F              1836 	add	a,#0xff - 0x80
   04F1 40 2C              1837 	jc	00235$
                    04F3   1838 	C$fb_lpc922.c$365$4$37 ==.
                           1839 ;	../fb_lpc922.c:365: if ((send_byte & fb_pattern)==0) {	// wenn Bit logisch 0 ist
   04F3 E5*29              1840 	mov	a,_fb_pattern
   04F5 5F                 1841 	anl	a,r7
   04F6 70 08              1842 	jnz	00224$
                    04F8   1843 	C$fb_lpc922.c$367$5$38 ==.
                           1844 ;	../fb_lpc922.c:367: FBOUTC=1;						// Bus runter ziehen
   04F8 D2 96              1845 	setb	_P1_6
                    04FA   1846 	C$fb_lpc922.c$369$5$38 ==.
                           1847 ;	../fb_lpc922.c:369: fbtx_bit=0;						// fbtx_bit dient zur spaeteren Kollisionspruefung
   04FA C2*09              1848 	clr	_fbtx_bit
                    04FC   1849 	C$fb_lpc922.c$370$5$38 ==.
                           1850 ;	../fb_lpc922.c:370: fb_parity=!fb_parity;			// Parity-Bit berechnen
   04FC B2*02              1851 	cpl	_fb_parity
   04FE 80 02              1852 	sjmp	00225$
   0500                    1853 00224$:
                    0500   1854 	C$fb_lpc922.c$372$4$37 ==.
                           1855 ;	../fb_lpc922.c:372: else fbtx_bit=1;
   0500 D2*09              1856 	setb	_fbtx_bit
   0502                    1857 00225$:
                    0502   1858 	C$fb_lpc922.c$373$4$37 ==.
                           1859 ;	../fb_lpc922.c:373: if (fb_pattern==0) {				// wenn Startbit: parity zuruecksetzen
   0502 E5*29              1860 	mov	a,_fb_pattern
   0504 70 07              1861 	jnz	00227$
                    0506   1862 	C$fb_lpc922.c$374$5$39 ==.
                           1863 ;	../fb_lpc922.c:374: fb_pattern=1;					// auf erstes Datenbit zeigen
   0506 75*29 01           1864 	mov	_fb_pattern,#0x01
                    0509   1865 	C$fb_lpc922.c$375$5$39 ==.
                           1866 ;	../fb_lpc922.c:375: fb_parity=0;
   0509 C2*02              1867 	clr	_fb_parity
   050B 80 06              1868 	sjmp	00228$
   050D                    1869 00227$:
                    050D   1870 	C$fb_lpc922.c$377$4$37 ==.
                           1871 ;	../fb_lpc922.c:377: else fb_pattern=fb_pattern<<1;		// naechstes Datenbit
   050D E5*29              1872 	mov	a,_fb_pattern
   050F 25*29              1873 	add	a,_fb_pattern
   0511 F5*29              1874 	mov	_fb_pattern,a
   0513                    1875 00228$:
                    0513   1876 	C$fb_lpc922.c$378$4$37 ==.
                           1877 ;	../fb_lpc922.c:378: if(fb_pattern==0) fb_pattern=129;	// alle Daten-Bits gesendet, Parity-Bit folgt
   0513 E5*29              1878 	mov	a,_fb_pattern
   0515 70 03              1879 	jnz	00230$
   0517 75*29 81           1880 	mov	_fb_pattern,#0x81
   051A                    1881 00230$:
                    051A   1882 	C$fb_lpc922.c$379$4$37 ==.
                           1883 ;	../fb_lpc922.c:379: fb_state=11;
   051A 75*2A 0B           1884 	mov	_fb_state,#0x0B
   051D 80 13              1885 	sjmp	00236$
   051F                    1886 00235$:
                    051F   1887 	C$fb_lpc922.c$382$4$40 ==.
                           1888 ;	../fb_lpc922.c:382: if (!fb_parity) {				// wenn Parity-Bit logisch 0
   051F 20*02 06           1889 	jb	_fb_parity,00232$
                    0522   1890 	C$fb_lpc922.c$383$5$41 ==.
                           1891 ;	../fb_lpc922.c:383: FBOUTC=1;						// Bus runterziehen
   0522 D2 96              1892 	setb	_P1_6
                    0524   1893 	C$fb_lpc922.c$384$5$41 ==.
                           1894 ;	../fb_lpc922.c:384: fbtx_bit=0;						// fbtx_bit dient zur spaeteren Kollisionspruefung
   0524 C2*09              1895 	clr	_fbtx_bit
   0526 80 02              1896 	sjmp	00233$
   0528                    1897 00232$:
                    0528   1898 	C$fb_lpc922.c$386$4$40 ==.
                           1899 ;	../fb_lpc922.c:386: else fbtx_bit=1;
   0528 D2*09              1900 	setb	_fbtx_bit
   052A                    1901 00233$:
                    052A   1902 	C$fb_lpc922.c$387$4$40 ==.
                           1903 ;	../fb_lpc922.c:387: telpos++;					// naechstes Byte
   052A 05*26              1904 	inc	_telpos
                    052C   1905 	C$fb_lpc922.c$388$4$40 ==.
                           1906 ;	../fb_lpc922.c:388: fb_pattern=0;				// wieder mit Startbit beginnen
   052C 75*29 00           1907 	mov	_fb_pattern,#0x00
                    052F   1908 	C$fb_lpc922.c$389$4$40 ==.
                           1909 ;	../fb_lpc922.c:389: fb_state=13;				// Pruefen ob Telegramm fertig
   052F 75*2A 0D           1910 	mov	_fb_state,#0x0D
   0532                    1911 00236$:
                    0532   1912 	C$fb_lpc922.c$391$3$36 ==.
                           1913 ;	../fb_lpc922.c:391: TH1=18; //reload 70µ -delay interrupt (von state 11 auf 13)
   0532 75 8D 12           1914 	mov	_TH1,#0x12
                    0535   1915 	C$fb_lpc922.c$393$2$2 ==.
                           1916 ;	../fb_lpc922.c:393: break;
   0535 02s05rC1           1917 	ljmp	00255$
                    0538   1918 	C$fb_lpc922.c$395$2$2 ==.
                           1919 ;	../fb_lpc922.c:395: case 11:	// Sendestufe aus, T=35us
   0538                    1920 00239$:
                    0538   1921 	C$fb_lpc922.c$396$2$2 ==.
                           1922 ;	../fb_lpc922.c:396: if(telpos==0 && fb_pattern==1) {	// 1. Byte Startbit
   0538 E5*26              1923 	mov	a,_telpos
   053A 70 07              1924 	jnz	00241$
   053C 74 01              1925 	mov	a,#0x01
   053E B5*29 02           1926 	cjne	a,_fb_pattern,00241$
                    0541   1927 	C$fb_lpc922.c$397$3$42 ==.
                           1928 ;	../fb_lpc922.c:397: repeat_count++;		// angefangener Sendeversuch, also Zaehler erhoehen
   0541 05*2B              1929 	inc	_repeat_count
   0543                    1930 00241$:
                    0543   1931 	C$fb_lpc922.c$399$2$2 ==.
                           1932 ;	../fb_lpc922.c:399: FBOUTC=0;				// Sendestufe aus
   0543 C2 96              1933 	clr	_P1_6
                    0545   1934 	C$fb_lpc922.c$400$2$2 ==.
                           1935 ;	../fb_lpc922.c:400: if (fbtx_bit & IE1) {	// Kollision
   0545 A2*09              1936 	mov	c,_fbtx_bit
   0547 82 8B              1937 	anl	c,_TCON_3
   0549 50 07              1938 	jnc	00244$
                    054B   1939 	C$fb_lpc922.c$401$3$43 ==.
                           1940 ;	../fb_lpc922.c:401: wait_for_ack=0;
   054B C2*0A              1941 	clr	_wait_for_ack
                    054D   1942 	C$fb_lpc922.c$402$3$43 ==.
                           1943 ;	../fb_lpc922.c:402: init_rx();				// Senden abbrechen und Empfang initialisieren
   054D 12s05rE5           1944 	lcall	_init_rx
   0550 80 06              1945 	sjmp	00245$
   0552                    1946 00244$:
                    0552   1947 	C$fb_lpc922.c$405$3$44 ==.
                           1948 ;	../fb_lpc922.c:405: fb_state=10;//12;
   0552 75*2A 0A           1949 	mov	_fb_state,#0x0A
                    0555   1950 	C$fb_lpc922.c$406$3$44 ==.
                           1951 ;	../fb_lpc922.c:406: TH1=110;// 35Âµs + delay (von state 10 auf 11)
   0555 75 8D 6E           1952 	mov	_TH1,#0x6E
   0558                    1953 00245$:
                    0558   1954 	C$fb_lpc922.c$408$2$2 ==.
                           1955 ;	../fb_lpc922.c:408: IE1=0;					// Flipflop loeschen
   0558 C2 8B              1956 	clr	_TCON_3
                    055A   1957 	C$fb_lpc922.c$409$2$2 ==.
                           1958 ;	../fb_lpc922.c:409: break;
                    055A   1959 	C$fb_lpc922.c$415$2$2 ==.
                           1960 ;	../fb_lpc922.c:415: case 13:	// Byte uebertragen, T=35us, pruefen ob Telegramm fertig
   055A 80 65              1961 	sjmp	00255$
   055C                    1962 00246$:
                    055C   1963 	C$fb_lpc922.c$416$2$2 ==.
                           1964 ;	../fb_lpc922.c:416: FBOUTC=0;
   055C C2 96              1965 	clr	_P1_6
                    055E   1966 	C$fb_lpc922.c$417$2$2 ==.
                           1967 ;	../fb_lpc922.c:417: TR1=0;
   055E C2 8E              1968 	clr	_TCON_6
                    0560   1969 	C$fb_lpc922.c$418$2$2 ==.
                           1970 ;	../fb_lpc922.c:418: TMOD=(TMOD & 0x0F) +0x10;	// Timer 1 als 16-Bit Timer
   0560 74 0F              1971 	mov	a,#0x0F
   0562 55 89              1972 	anl	a,_TMOD
   0564 24 10              1973 	add	a,#0x10
   0566 F5 89              1974 	mov	_TMOD,a
                    0568   1975 	C$fb_lpc922.c$419$2$2 ==.
                           1976 ;	../fb_lpc922.c:419: TH1=0xFB;					// Timer 1 auf Interbyte Abstand setzen (3 Bit Pause = 312Âµs
   0568 75 8D FB           1977 	mov	_TH1,#0xFB
                    056B   1978 	C$fb_lpc922.c$420$2$2 ==.
                           1979 ;	../fb_lpc922.c:420: TL1=0x90;
   056B 75 8B 90           1980 	mov	_TL1,#0x90
                    056E   1981 	C$fb_lpc922.c$421$2$2 ==.
                           1982 ;	../fb_lpc922.c:421: TR1=1;
   056E D2 8E              1983 	setb	_TCON_6
                    0570   1984 	C$fb_lpc922.c$422$2$2 ==.
                           1985 ;	../fb_lpc922.c:422: if (send_ack || send_nack) {	// ACK/NACK senden
   0570 20*0B 03           1986 	jb	_send_ack,00250$
   0573 30*0C 05           1987 	jnb	_send_nack,00251$
   0576                    1988 00250$:
                    0576   1989 	C$fb_lpc922.c$423$3$45 ==.
                           1990 ;	../fb_lpc922.c:423: init_rx();					// ACK senden abgeschlossen, also statemachine auf Anfang
   0576 12s05rE5           1991 	lcall	_init_rx
   0579 80 2B              1992 	sjmp	00252$
   057B                    1993 00251$:
                    057B   1994 	C$fb_lpc922.c$426$3$46 ==.
                           1995 ;	../fb_lpc922.c:426: if (telpos>((telegramm[5]&0x0F)+7)) {		// Telegramm fertig gesendet
   057B 74 0F              1996 	mov	a,#0x0F
   057D 55*0C              1997 	anl	a,(_telegramm + 0x0005)
   057F FF                 1998 	mov	r7,a
   0580 7E 00              1999 	mov	r6,#0x00
   0582 74 07              2000 	mov	a,#0x07
   0584 2F                 2001 	add	a,r7
   0585 FF                 2002 	mov	r7,a
   0586 E4                 2003 	clr	a
   0587 3E                 2004 	addc	a,r6
   0588 FE                 2005 	mov	r6,a
   0589 AC*26              2006 	mov	r4,_telpos
   058B 7D 00              2007 	mov	r5,#0x00
   058D C3                 2008 	clr	c
   058E EF                 2009 	mov	a,r7
   058F 9C                 2010 	subb	a,r4
   0590 EE                 2011 	mov	a,r6
   0591 64 80              2012 	xrl	a,#0x80
   0593 8D F0              2013 	mov	b,r5
   0595 63 F0 80           2014 	xrl	b,#0x80
   0598 95 F0              2015 	subb	a,b
   059A 50 07              2016 	jnc	00248$
                    059C   2017 	C$fb_lpc922.c$427$4$47 ==.
                           2018 ;	../fb_lpc922.c:427: tel_sent=1;
   059C D2*07              2019 	setb	_tel_sent
                    059E   2020 	C$fb_lpc922.c$428$4$47 ==.
                           2021 ;	../fb_lpc922.c:428: init_rx();	// Telegramm senden abgeschlossen, ggf. wiederholen wenn nicht geackt wird
   059E 12s05rE5           2022 	lcall	_init_rx
   05A1 80 03              2023 	sjmp	00252$
   05A3                    2024 00248$:
                    05A3   2025 	C$fb_lpc922.c$430$3$46 ==.
                           2026 ;	../fb_lpc922.c:430: else fb_state=14;		// naechstes Byte: Interbyte Abstand einhalten
   05A3 75*2A 0E           2027 	mov	_fb_state,#0x0E
   05A6                    2028 00252$:
                    05A6   2029 	C$fb_lpc922.c$432$2$2 ==.
                           2030 ;	../fb_lpc922.c:432: IE1=0;
   05A6 C2 8B              2031 	clr	_TCON_3
                    05A8   2032 	C$fb_lpc922.c$433$2$2 ==.
                           2033 ;	../fb_lpc922.c:433: break;
                    05A8   2034 	C$fb_lpc922.c$435$2$2 ==.
                           2035 ;	../fb_lpc922.c:435: case 14:	// Interbyte Abstand erreicht (=Stopbit + 2 Bit)
   05A8 80 17              2036 	sjmp	00255$
   05AA                    2037 00254$:
                    05AA   2038 	C$fb_lpc922.c$436$2$2 ==.
                           2039 ;	../fb_lpc922.c:436: TR1=0;
   05AA C2 8E              2040 	clr	_TCON_6
                    05AC   2041 	C$fb_lpc922.c$437$2$2 ==.
                           2042 ;	../fb_lpc922.c:437: TMOD=(TMOD & 0x0F) +0x20;			// Timer 1 als 8-Bit autoreload
   05AC 74 0F              2043 	mov	a,#0x0F
   05AE 55 89              2044 	anl	a,_TMOD
   05B0 24 20              2045 	add	a,#0x20
   05B2 F5 89              2046 	mov	_TMOD,a
                    05B4   2047 	C$fb_lpc922.c$438$2$2 ==.
                           2048 ;	../fb_lpc922.c:438: TH1=110;							// Timer 1 auf 104/3 us laden
   05B4 75 8D 6E           2049 	mov	_TH1,#0x6E
                    05B7   2050 	C$fb_lpc922.c$439$2$2 ==.
                           2051 ;	../fb_lpc922.c:439: TL1=128;
   05B7 75 8B 80           2052 	mov	_TL1,#0x80
                    05BA   2053 	C$fb_lpc922.c$440$2$2 ==.
                           2054 ;	../fb_lpc922.c:440: TF1=0;
   05BA C2 8F              2055 	clr	_TCON_7
                    05BC   2056 	C$fb_lpc922.c$441$2$2 ==.
                           2057 ;	../fb_lpc922.c:441: TR1=1;
   05BC D2 8E              2058 	setb	_TCON_6
                    05BE   2059 	C$fb_lpc922.c$442$2$2 ==.
                           2060 ;	../fb_lpc922.c:442: fb_state=10;
   05BE 75*2A 0A           2061 	mov	_fb_state,#0x0A
                    05C1   2062 	C$fb_lpc922.c$447$1$1 ==.
                           2063 ;	../fb_lpc922.c:447: }
   05C1                    2064 00255$:
                    05C1   2065 	C$fb_lpc922.c$448$1$1 ==.
                           2066 ;	../fb_lpc922.c:448: interrupted=1;			// zeigt der app, dass sie unterbrochen wurde
   05C1 D2*01              2067 	setb	_interrupted
   05C3 85*00 81           2068 	mov	sp,_bp
   05C6 D0*00              2069 	pop	_bp
   05C8 D0 D0              2070 	pop	psw
   05CA D0 00              2071 	pop	(0+0)
   05CC D0 01              2072 	pop	(0+1)
   05CE D0 02              2073 	pop	(0+2)
   05D0 D0 03              2074 	pop	(0+3)
   05D2 D0 04              2075 	pop	(0+4)
   05D4 D0 05              2076 	pop	(0+5)
   05D6 D0 06              2077 	pop	(0+6)
   05D8 D0 07              2078 	pop	(0+7)
   05DA D0 83              2079 	pop	dph
   05DC D0 82              2080 	pop	dpl
   05DE D0 F0              2081 	pop	b
   05E0 D0 E0              2082 	pop	acc
   05E2 D0*00              2083 	pop	bits
                    05E4   2084 	C$fb_lpc922.c$449$1$1 ==.
                    05E4   2085 	XG$T1_int$0$0 ==.
   05E4 32                 2086 	reti
                           2087 ;------------------------------------------------------------
                           2088 ;Allocation info for local variables in function 'init_rx'
                           2089 ;------------------------------------------------------------
                    05E5   2090 	G$init_rx$0$0 ==.
                    05E5   2091 	C$fb_lpc922.c$452$1$1 ==.
                           2092 ;	../fb_lpc922.c:452: void init_rx(void) 	// Empfangen initiieren (statemachine auf Anfang)
                           2093 ;	-----------------------------------------
                           2094 ;	 function init_rx
                           2095 ;	-----------------------------------------
   05E5                    2096 _init_rx:
                    05E5   2097 	C$fb_lpc922.c$454$1$1 ==.
                           2098 ;	../fb_lpc922.c:454: fb_state=0;
   05E5 75*2A 00           2099 	mov	_fb_state,#0x00
                    05E8   2100 	C$fb_lpc922.c$455$1$1 ==.
                           2101 ;	../fb_lpc922.c:455: IE1=0;
   05E8 C2 8B              2102 	clr	_TCON_3
                    05EA   2103 	C$fb_lpc922.c$456$1$1 ==.
                           2104 ;	../fb_lpc922.c:456: TR1=0;
   05EA C2 8E              2105 	clr	_TCON_6
                    05EC   2106 	C$fb_lpc922.c$457$1$1 ==.
                           2107 ;	../fb_lpc922.c:457: ET1=0;
   05EC C2 AB              2108 	clr	_IEN0_3
                    05EE   2109 	C$fb_lpc922.c$458$1$1 ==.
                           2110 ;	../fb_lpc922.c:458: cs=0;
   05EE 75*27 00           2111 	mov	_cs,#0x00
                    05F1   2112 	C$fb_lpc922.c$459$1$1 ==.
                           2113 ;	../fb_lpc922.c:459: telpos=0;
   05F1 75*26 00           2114 	mov	_telpos,#0x00
                    05F4   2115 	C$fb_lpc922.c$460$1$1 ==.
                           2116 ;	../fb_lpc922.c:460: TR1=0;
   05F4 C2 8E              2117 	clr	_TCON_6
                    05F6   2118 	C$fb_lpc922.c$461$1$1 ==.
                           2119 ;	../fb_lpc922.c:461: TMOD=(TMOD & 0x0F) +0x10;	// Timer 1 als 16-Bit Timer
   05F6 74 0F              2120 	mov	a,#0x0F
   05F8 55 89              2121 	anl	a,_TMOD
   05FA 24 10              2122 	add	a,#0x10
   05FC F5 89              2123 	mov	_TMOD,a
                    05FE   2124 	C$fb_lpc922.c$462$1$1 ==.
                           2125 ;	../fb_lpc922.c:462: TH1=0x89;					// busfree Zeit = 15 Bit (auf ACK) + 11 Bit (ACK) + 53 Bit
   05FE 75 8D 89           2126 	mov	_TH1,#0x89
                    0601   2127 	C$fb_lpc922.c$463$1$1 ==.
                           2128 ;	../fb_lpc922.c:463: TL1=0xAF;
   0601 75 8B AF           2129 	mov	_TL1,#0xAF
                    0604   2130 	C$fb_lpc922.c$464$1$1 ==.
                           2131 ;	../fb_lpc922.c:464: send_ack=0;
   0604 C2*0B              2132 	clr	_send_ack
                    0606   2133 	C$fb_lpc922.c$465$1$1 ==.
                           2134 ;	../fb_lpc922.c:465: send_nack=0;
   0606 C2*0C              2135 	clr	_send_nack
                    0608   2136 	C$fb_lpc922.c$466$1$1 ==.
                           2137 ;	../fb_lpc922.c:466: TF1=0;
   0608 C2 8F              2138 	clr	_TCON_7
                    060A   2139 	C$fb_lpc922.c$467$1$1 ==.
                           2140 ;	../fb_lpc922.c:467: TR1=1;
   060A D2 8E              2141 	setb	_TCON_6
                    060C   2142 	C$fb_lpc922.c$468$1$1 ==.
                           2143 ;	../fb_lpc922.c:468: EX1=1;
   060C D2 AA              2144 	setb	_IEN0_2
                    060E   2145 	C$fb_lpc922.c$469$1$1 ==.
                           2146 ;	../fb_lpc922.c:469: ET1=1;
   060E D2 AB              2147 	setb	_IEN0_3
                    0610   2148 	C$fb_lpc922.c$470$1$1 ==.
                           2149 ;	../fb_lpc922.c:470: telegramm_ok=0;
   0610 C2*0F              2150 	clr	_telegramm_ok
                    0612   2151 	C$fb_lpc922.c$471$1$1 ==.
                    0612   2152 	XG$init_rx$0$0 ==.
   0612 22                 2153 	ret
                           2154 ;------------------------------------------------------------
                           2155 ;Allocation info for local variables in function 'init_tx'
                           2156 ;------------------------------------------------------------
                           2157 ;n                         Allocated to registers r6 
                           2158 ;cs_pos                    Allocated to registers r7 
                           2159 ;------------------------------------------------------------
                    0613   2160 	G$init_tx$0$0 ==.
                    0613   2161 	C$fb_lpc922.c$474$1$1 ==.
                           2162 ;	../fb_lpc922.c:474: void init_tx(void) 		// Checksum des Telegramms berechnen und Senden initiieren
                           2163 ;	-----------------------------------------
                           2164 ;	 function init_tx
                           2165 ;	-----------------------------------------
   0613                    2166 _init_tx:
                    0613   2167 	C$fb_lpc922.c$478$1$1 ==.
                           2168 ;	../fb_lpc922.c:478: TR1=0;
   0613 C2 8E              2169 	clr	_TCON_6
                    0615   2170 	C$fb_lpc922.c$479$1$1 ==.
                           2171 ;	../fb_lpc922.c:479: TMOD=(TMOD & 0x0F) +0x20;			// Timer 1 als 8-Bit autoreload
   0615 74 0F              2172 	mov	a,#0x0F
   0617 55 89              2173 	anl	a,_TMOD
   0619 24 20              2174 	add	a,#0x20
   061B F5 89              2175 	mov	_TMOD,a
                    061D   2176 	C$fb_lpc922.c$480$1$1 ==.
                           2177 ;	../fb_lpc922.c:480: TH1=110;							// von state 10 auf 11
   061D 75 8D 6E           2178 	mov	_TH1,#0x6E
                    0620   2179 	C$fb_lpc922.c$481$1$1 ==.
                           2180 ;	../fb_lpc922.c:481: TL1=128;							// von hier bis state 10
   0620 75 8B 80           2181 	mov	_TL1,#0x80
                    0623   2182 	C$fb_lpc922.c$482$1$1 ==.
                           2183 ;	../fb_lpc922.c:482: TF1=0;
   0623 C2 8F              2184 	clr	_TCON_7
                    0625   2185 	C$fb_lpc922.c$484$1$1 ==.
                           2186 ;	../fb_lpc922.c:484: cs_pos=(telegramm[5]&0x0F)+7;		// Position der Checksum im Telegramm
   0625 74 0F              2187 	mov	a,#0x0F
   0627 55*0C              2188 	anl	a,(_telegramm + 0x0005)
   0629 24 07              2189 	add	a,#0x07
   062B FF                 2190 	mov	r7,a
                    062C   2191 	C$fb_lpc922.c$485$1$1 ==.
                           2192 ;	../fb_lpc922.c:485: cs=0xFF;
   062C 75*27 FF           2193 	mov	_cs,#0xFF
                    062F   2194 	C$fb_lpc922.c$486$1$1 ==.
                           2195 ;	../fb_lpc922.c:486: for(n=0;n<cs_pos;n++) {
   062F 7E 00              2196 	mov	r6,#0x00
   0631                    2197 00101$:
   0631 C3                 2198 	clr	c
   0632 EE                 2199 	mov	a,r6
   0633 9F                 2200 	subb	a,r7
   0634 50 0B              2201 	jnc	00104$
                    0636   2202 	C$fb_lpc922.c$487$2$2 ==.
                           2203 ;	../fb_lpc922.c:487: cs^=telegramm[n];				// Checksum berechnen
   0636 EE                 2204 	mov	a,r6
   0637 24r07              2205 	add	a,#_telegramm
   0639 F9                 2206 	mov	r1,a
   063A E7                 2207 	mov	a,@r1
   063B FD                 2208 	mov	r5,a
   063C 62*27              2209 	xrl	_cs,a
                    063E   2210 	C$fb_lpc922.c$486$1$1 ==.
                           2211 ;	../fb_lpc922.c:486: for(n=0;n<cs_pos;n++) {
   063E 0E                 2212 	inc	r6
   063F 80 F0              2213 	sjmp	00101$
   0641                    2214 00104$:
                    0641   2215 	C$fb_lpc922.c$489$1$1 ==.
                           2216 ;	../fb_lpc922.c:489: telegramm[cs_pos]=cs;				// Checksum hinter Nutzdaten anfaegen
   0641 EF                 2217 	mov	a,r7
   0642 24r07              2218 	add	a,#_telegramm
   0644 F8                 2219 	mov	r0,a
   0645 A6*27              2220 	mov	@r0,_cs
                    0647   2221 	C$fb_lpc922.c$490$1$1 ==.
                           2222 ;	../fb_lpc922.c:490: ack=0;
   0647 C2*03              2223 	clr	_ack
                    0649   2224 	C$fb_lpc922.c$491$1$1 ==.
                           2225 ;	../fb_lpc922.c:491: nack=0;
   0649 C2*04              2226 	clr	_nack
                    064B   2227 	C$fb_lpc922.c$492$1$1 ==.
                           2228 ;	../fb_lpc922.c:492: wait_for_ack=1;
   064B D2*0A              2229 	setb	_wait_for_ack
                    064D   2230 	C$fb_lpc922.c$494$1$1 ==.
                           2231 ;	../fb_lpc922.c:494: fb_state=10;						// naechster state: senden
   064D 75*2A 0A           2232 	mov	_fb_state,#0x0A
                    0650   2233 	C$fb_lpc922.c$495$1$1 ==.
                           2234 ;	../fb_lpc922.c:495: fb_pattern=0;						// naechstes zu sendendes Bit, 0=Startbit
   0650 75*29 00           2235 	mov	_fb_pattern,#0x00
                    0653   2236 	C$fb_lpc922.c$496$1$1 ==.
                           2237 ;	../fb_lpc922.c:496: telpos=0;							// naechstes zu sendende Byte
   0653 75*26 00           2238 	mov	_telpos,#0x00
                    0656   2239 	C$fb_lpc922.c$497$1$1 ==.
                           2240 ;	../fb_lpc922.c:497: EX1=0;								// ext. int1 inaktiv
   0656 C2 AA              2241 	clr	_IEN0_2
                    0658   2242 	C$fb_lpc922.c$498$1$1 ==.
                           2243 ;	../fb_lpc922.c:498: TR1=1;								// Timer 1 starten
   0658 D2 8E              2244 	setb	_TCON_6
                    065A   2245 	C$fb_lpc922.c$499$1$1 ==.
                           2246 ;	../fb_lpc922.c:499: ET1=1;								// Timer 1 int. aktiv
   065A D2 AB              2247 	setb	_IEN0_3
                    065C   2248 	C$fb_lpc922.c$500$1$1 ==.
                    065C   2249 	XG$init_tx$0$0 ==.
   065C 22                 2250 	ret
                           2251 ;------------------------------------------------------------
                           2252 ;Allocation info for local variables in function 'gapos_in_gat'
                           2253 ;------------------------------------------------------------
                           2254 ;gal                       Allocated to stack - _bp -3
                           2255 ;gah                       Allocated to registers r7 
                           2256 ;ga_position               Allocated to registers r6 
                           2257 ;n                         Allocated to registers r5 
                           2258 ;------------------------------------------------------------
                    065D   2259 	G$gapos_in_gat$0$0 ==.
                    065D   2260 	C$fb_lpc922.c$507$1$1 ==.
                           2261 ;	../fb_lpc922.c:507: unsigned char gapos_in_gat(unsigned char gah, unsigned char gal)
                           2262 ;	-----------------------------------------
                           2263 ;	 function gapos_in_gat
                           2264 ;	-----------------------------------------
   065D                    2265 _gapos_in_gat:
   065D C0*00              2266 	push	_bp
   065F 85 81*00           2267 	mov	_bp,sp
   0662 AF 82              2268 	mov	r7,dpl
                    0664   2269 	C$fb_lpc922.c$511$1$1 ==.
                           2270 ;	../fb_lpc922.c:511: ga_position=0xFF; 			// default return Wert 0xFF = nicht gefunden
   0664 7E FF              2271 	mov	r6,#0xFF
                    0666   2272 	C$fb_lpc922.c$512$1$1 ==.
                           2273 ;	../fb_lpc922.c:512: if (eeprom[ADDRTAB]<0xFF){ // && !transparency
   0666 90 1D 16           2274 	mov	dptr,#(_eeprom + 0x0016)
   0669 E4                 2275 	clr	a
   066A 93                 2276 	movc	a,@a+dptr
   066B FD                 2277 	mov	r5,a
   066C BD FF 00           2278 	cjne	r5,#0xFF,00121$
   066F                    2279 00121$:
   066F 50 35              2280 	jnc	00107$
                    0671   2281 	C$fb_lpc922.c$513$2$2 ==.
                           2282 ;	../fb_lpc922.c:513: if (eeprom[ADDRTAB]) {
   0671 90 1D 16           2283 	mov	dptr,#(_eeprom + 0x0016)
   0674 E4                 2284 	clr	a
   0675 93                 2285 	movc	a,@a+dptr
   0676 60 2E              2286 	jz	00107$
                    0678   2287 	C$fb_lpc922.c$514$3$3 ==.
                           2288 ;	../fb_lpc922.c:514: for (n=eeprom[ADDRTAB]-1;n;n--) {
   0678 90 1D 16           2289 	mov	dptr,#(_eeprom + 0x0016)
   067B E4                 2290 	clr	a
   067C 93                 2291 	movc	a,@a+dptr
   067D FD                 2292 	mov	r5,a
   067E 1D                 2293 	dec	r5
   067F                    2294 00108$:
   067F ED                 2295 	mov	a,r5
   0680 60 24              2296 	jz	00107$
                    0682   2297 	C$fb_lpc922.c$515$4$4 ==.
                           2298 ;	../fb_lpc922.c:515: if (gah==eeprom[ADDRTAB+n*2+1] && gal==eeprom[ADDRTAB+n*2+2])
   0682 ED                 2299 	mov	a,r5
   0683 2D                 2300 	add	a,r5
   0684 FC                 2301 	mov	r4,a
   0685 24 17              2302 	add	a,#0x17
   0687 90 1D 00           2303 	mov	dptr,#_eeprom
   068A 93                 2304 	movc	a,@a+dptr
   068B FB                 2305 	mov	r3,a
   068C EF                 2306 	mov	a,r7
   068D B5 03 13           2307 	cjne	a,ar3,00110$
   0690 74 18              2308 	mov	a,#0x18
   0692 2C                 2309 	add	a,r4
   0693 90 1D 00           2310 	mov	dptr,#_eeprom
   0696 93                 2311 	movc	a,@a+dptr
   0697 FC                 2312 	mov	r4,a
   0698 E5*00              2313 	mov	a,_bp
   069A 24 FD              2314 	add	a,#0xfd
   069C F8                 2315 	mov	r0,a
   069D E6                 2316 	mov	a,@r0
   069E B5 04 02           2317 	cjne	a,ar4,00110$
                    06A1   2318 	C$fb_lpc922.c$516$4$4 ==.
                           2319 ;	../fb_lpc922.c:516: ga_position=n;
   06A1 8D 06              2320 	mov	ar6,r5
   06A3                    2321 00110$:
                    06A3   2322 	C$fb_lpc922.c$514$3$3 ==.
                           2323 ;	../fb_lpc922.c:514: for (n=eeprom[ADDRTAB]-1;n;n--) {
   06A3 1D                 2324 	dec	r5
   06A4 80 D9              2325 	sjmp	00108$
   06A6                    2326 00107$:
                    06A6   2327 	C$fb_lpc922.c$520$1$1 ==.
                           2328 ;	../fb_lpc922.c:520: return (ga_position);
   06A6 8E 82              2329 	mov	dpl,r6
   06A8 D0*00              2330 	pop	_bp
                    06AA   2331 	C$fb_lpc922.c$521$1$1 ==.
                    06AA   2332 	XG$gapos_in_gat$0$0 ==.
   06AA 22                 2333 	ret
                           2334 ;------------------------------------------------------------
                           2335 ;Allocation info for local variables in function 'send_obj_value'
                           2336 ;------------------------------------------------------------
                           2337 ;objno                     Allocated to registers r7 
                           2338 ;success                   Allocated to registers b0 
                           2339 ;------------------------------------------------------------
                    06AB   2340 	G$send_obj_value$0$0 ==.
                    06AB   2341 	C$fb_lpc922.c$528$1$1 ==.
                           2342 ;	../fb_lpc922.c:528: __bit send_obj_value(unsigned char objno)
                           2343 ;	-----------------------------------------
                           2344 ;	 function send_obj_value
                           2345 ;	-----------------------------------------
   06AB                    2346 _send_obj_value:
   06AB AF 82              2347 	mov	r7,dpl
                    06AD   2348 	C$fb_lpc922.c$530$1$1 ==.
                           2349 ;	../fb_lpc922.c:530: __bit success=0;
   06AD C2*00              2350 	clr	b0
                    06AF   2351 	C$fb_lpc922.c$532$1$1 ==.
                           2352 ;	../fb_lpc922.c:532: if (objno < 0x40 && (read_objflags(objno) & 0x44) != 0x44)
   06AF BF 40 00           2353 	cjne	r7,#0x40,00112$
   06B2                    2354 00112$:
   06B2 50 1B              2355 	jnc	00104$
   06B4 8F 82              2356 	mov	dpl,r7
   06B6 C0 07              2357 	push	ar7
   06B8 C0*00              2358 	push	bits
   06BA 12s0Ar04           2359 	lcall	_read_objflags
   06BD E5 82              2360 	mov	a,dpl
   06BF D0*00              2361 	pop	bits
   06C1 D0 07              2362 	pop	ar7
   06C3 54 44              2363 	anl	a,#0x44
   06C5 FE                 2364 	mov	r6,a
   06C6 BE 44 02           2365 	cjne	r6,#0x44,00114$
   06C9 80 04              2366 	sjmp	00104$
   06CB                    2367 00114$:
                    06CB   2368 	C$fb_lpc922.c$534$2$2 ==.
                           2369 ;	../fb_lpc922.c:534: success=1;
   06CB D2*00              2370 	setb	b0
   06CD 80 2A              2371 	sjmp	00105$
   06CF                    2372 00104$:
                    06CF   2373 	C$fb_lpc922.c$536$1$1 ==.
                           2374 ;	../fb_lpc922.c:536: else if(tx_nextsend!=((tx_nextwrite+1)&0x07)) {
   06CF AD*2C              2375 	mov	r5,_tx_nextwrite
   06D1 7E 00              2376 	mov	r6,#0x00
   06D3 0D                 2377 	inc	r5
   06D4 BD 00 01           2378 	cjne	r5,#0x00,00115$
   06D7 0E                 2379 	inc	r6
   06D8                    2380 00115$:
   06D8 53 05 07           2381 	anl	ar5,#0x07
   06DB 7E 00              2382 	mov	r6,#0x00
   06DD AB*2D              2383 	mov	r3,_tx_nextsend
   06DF 7C 00              2384 	mov	r4,#0x00
   06E1 EB                 2385 	mov	a,r3
   06E2 B5 05 06           2386 	cjne	a,ar5,00116$
   06E5 EC                 2387 	mov	a,r4
   06E6 B5 06 02           2388 	cjne	a,ar6,00116$
   06E9 80 0E              2389 	sjmp	00105$
   06EB                    2390 00116$:
                    06EB   2391 	C$fb_lpc922.c$537$2$3 ==.
                           2392 ;	../fb_lpc922.c:537: tx_buffer[tx_nextwrite]=objno;
   06EB E5*2C              2393 	mov	a,_tx_nextwrite
   06ED 24r1E              2394 	add	a,#_tx_buffer
   06EF F8                 2395 	mov	r0,a
   06F0 A6 07              2396 	mov	@r0,ar7
                    06F2   2397 	C$fb_lpc922.c$538$2$3 ==.
                           2398 ;	../fb_lpc922.c:538: tx_nextwrite++;
   06F2 05*2C              2399 	inc	_tx_nextwrite
                    06F4   2400 	C$fb_lpc922.c$539$2$3 ==.
                           2401 ;	../fb_lpc922.c:539: tx_nextwrite&=0x07;
   06F4 53*2C 07           2402 	anl	_tx_nextwrite,#0x07
                    06F7   2403 	C$fb_lpc922.c$540$2$3 ==.
                           2404 ;	../fb_lpc922.c:540: success=1;
   06F7 D2*00              2405 	setb	b0
   06F9                    2406 00105$:
                    06F9   2407 	C$fb_lpc922.c$543$1$1 ==.
                           2408 ;	../fb_lpc922.c:543: TR1=1;	// statemachine starten falls vorher in state 0 gestoppt
   06F9 D2 8E              2409 	setb	_TCON_6
                    06FB   2410 	C$fb_lpc922.c$544$1$1 ==.
                           2411 ;	../fb_lpc922.c:544: return(success);
   06FB A2*00              2412 	mov	c,b0
                    06FD   2413 	C$fb_lpc922.c$545$1$1 ==.
                    06FD   2414 	XG$send_obj_value$0$0 ==.
   06FD 22                 2415 	ret
                           2416 ;------------------------------------------------------------
                           2417 ;Allocation info for local variables in function 'process_tel'
                           2418 ;------------------------------------------------------------
                           2419 ;tpdu                      Allocated to registers r6 
                           2420 ;apdu                      Allocated to stack - _bp +1
                           2421 ;ab                        Allocated to registers r7 
                           2422 ;n                         Allocated to stack - _bp +2
                           2423 ;objno                     Allocated to registers r3 
                           2424 ;objflags                  Allocated to registers r2 
                           2425 ;gapos                     Allocated to registers r7 
                           2426 ;atp                       Allocated to registers r6 
                           2427 ;assmax                    Allocated to registers r5 
                           2428 ;asspos                    Allocated to registers r6 
                           2429 ;sloc0                     Allocated to stack - _bp +11
                           2430 ;sloc1                     Allocated to stack - _bp +12
                           2431 ;sloc2                     Allocated to stack - _bp +3
                           2432 ;------------------------------------------------------------
                    06FE   2433 	G$process_tel$0$0 ==.
                    06FE   2434 	C$fb_lpc922.c$550$1$1 ==.
                           2435 ;	../fb_lpc922.c:550: void process_tel(void)
                           2436 ;	-----------------------------------------
                           2437 ;	 function process_tel
                           2438 ;	-----------------------------------------
   06FE                    2439 _process_tel:
   06FE C0*00              2440 	push	_bp
   0700 E5 81              2441 	mov	a,sp
   0702 F5*00              2442 	mov	_bp,a
   0704 24 04              2443 	add	a,#0x04
   0706 F5 81              2444 	mov	sp,a
                    0708   2445 	C$fb_lpc922.c$555$1$1 ==.
                           2446 ;	../fb_lpc922.c:555: tel_arrived=0;
   0708 C2*06              2447 	clr	_tel_arrived
                    070A   2448 	C$fb_lpc922.c$556$1$1 ==.
                           2449 ;	../fb_lpc922.c:556: tpdu=telegramm[6]&0xC3;
   070A AF*0D              2450 	mov	r7,(_telegramm + 0x0006)
   070C 74 C3              2451 	mov	a,#0xC3
   070E 5F                 2452 	anl	a,r7
   070F FE                 2453 	mov	r6,a
                    0710   2454 	C$fb_lpc922.c$557$1$1 ==.
                           2455 ;	../fb_lpc922.c:557: apdu=telegramm[7];
   0710 AD*0E              2456 	mov	r5,(_telegramm + 0x0007)
   0712 A8*00              2457 	mov	r0,_bp
   0714 08                 2458 	inc	r0
   0715 A6 05              2459 	mov	@r0,ar5
                    0717   2460 	C$fb_lpc922.c$560$1$1 ==.
                           2461 ;	../fb_lpc922.c:560: if(telegramm[3]==0 && telegramm[4]==0) {	// nur wenn wenn Zieladresse = 0
   0717 E5*0A              2462 	mov	a,(_telegramm + 0x0003)
   0719 FB                 2463 	mov	r3,a
   071A 70 49              2464 	jnz	00170$
   071C E5*0B              2465 	mov	a,(_telegramm + 0x0004)
   071E 70 45              2466 	jnz	00170$
                    0720   2467 	C$fb_lpc922.c$561$2$2 ==.
                           2468 ;	../fb_lpc922.c:561: if(status60 & 0x01) {					// und nur im prog mode
   0720 E5*2E              2469 	mov	a,_status60
   0722 20 E0 03           2470 	jb	acc.0,00224$
   0725 02s09rFE           2471 	ljmp	00177$
   0728                    2472 00224$:
                    0728   2473 	C$fb_lpc922.c$562$3$3 ==.
                           2474 ;	../fb_lpc922.c:562: if(tpdu==BROADCAST_PDU_SET_PA_REQ && apdu==SET_PHYSADDR_REQUEST) //set_pa();				// 00000000 11000000
   0728 EE                 2475 	mov	a,r6
   0729 70 20              2476 	jnz	00105$
   072B A8*00              2477 	mov	r0,_bp
   072D 08                 2478 	inc	r0
   072E B6 C0 1A           2479 	cjne	@r0,#0xC0,00105$
                    0731   2480 	C$fb_lpc922.c$565$4$4 ==.
                           2481 ;	../fb_lpc922.c:565: while(fb_state!=0);		// warten falls noch gesendet wird
   0731                    2482 00101$:
   0731 E5*2A              2483 	mov	a,_fb_state
   0733 70 FC              2484 	jnz	00101$
                    0735   2485 	C$fb_lpc922.c$566$4$4 ==.
                           2486 ;	../fb_lpc922.c:566: EA=0;
   0735 C2 AF              2487 	clr	_IEN0_7
                    0737   2488 	C$fb_lpc922.c$567$4$4 ==.
                           2489 ;	../fb_lpc922.c:567: FMCON=0x00;				// load command, leert das pageregister
   0737 75 E4 00           2490 	mov	_FMCON,#0x00
                    073A   2491 	C$fb_lpc922.c$568$4$4 ==.
                           2492 ;	../fb_lpc922.c:568: FMADRH=EEPROM_ADDR_H;	// 0x1D bei 922;
   073A 75 E7 1D           2493 	mov	_FMADRH,#0x1D
                    073D   2494 	C$fb_lpc922.c$569$4$4 ==.
                           2495 ;	../fb_lpc922.c:569: FMADRL=ADDRTAB+1;
   073D 75 E6 17           2496 	mov	_FMADRL,#0x17
                    0740   2497 	C$fb_lpc922.c$570$4$4 ==.
                           2498 ;	../fb_lpc922.c:570: FMDATA=telegramm[8];
   0740 85*0F E5           2499 	mov	_FMDATA,(_telegramm + 0x0008)
                    0743   2500 	C$fb_lpc922.c$571$4$4 ==.
                           2501 ;	../fb_lpc922.c:571: FMDATA=telegramm[9];	// naechstes Byte, da autoinkrement
   0743 85*10 E5           2502 	mov	_FMDATA,(_telegramm + 0x0009)
                    0746   2503 	C$fb_lpc922.c$572$4$4 ==.
                           2504 ;	../fb_lpc922.c:572: FMCON=0x68;				// write command, schreibt pageregister ins flash und versetzt CPU in idle fuer 4ms
   0746 75 E4 68           2505 	mov	_FMCON,#0x68
                    0749   2506 	C$fb_lpc922.c$573$4$4 ==.
                           2507 ;	../fb_lpc922.c:573: EA=1;
   0749 D2 AF              2508 	setb	_IEN0_7
   074B                    2509 00105$:
                    074B   2510 	C$fb_lpc922.c$580$3$3 ==.
                           2511 ;	../fb_lpc922.c:580: if(tpdu==BROADCAST_PDU_READ_PA && apdu==READ_PHYSADDR_REQUEST) send_obj_value(READ_PHYSADDR_RESPONSE);	// 00000001 00000000
   074B BE 01 02           2512 	cjne	r6,#0x01,00229$
   074E 80 03              2513 	sjmp	00230$
   0750                    2514 00229$:
   0750 02s09rFE           2515 	ljmp	00177$
   0753                    2516 00230$:
   0753 A8*00              2517 	mov	r0,_bp
   0755 08                 2518 	inc	r0
   0756 E6                 2519 	mov	a,@r0
   0757 60 03              2520 	jz	00231$
   0759 02s09rFE           2521 	ljmp	00177$
   075C                    2522 00231$:
   075C 75 82 83           2523 	mov	dpl,#0x83
   075F 12s06rAB           2524 	lcall	_send_obj_value
   0762 02s09rFE           2525 	ljmp	00177$
   0765                    2526 00170$:
                    0765   2527 	C$fb_lpc922.c$585$2$5 ==.
                           2528 ;	../fb_lpc922.c:585: if((telegramm[5]&0x80)==0x00) {	// Destination Adress Flag Bit 7, 0=phys. Adr., 1=Gruppenadr.
   0765 E5*0C              2529 	mov	a,(_telegramm + 0x0005)
   0767 30 E7 03           2530 	jnb	acc.7,00232$
   076A 02s09r49           2531 	ljmp	00167$
   076D                    2532 00232$:
                    076D   2533 	C$fb_lpc922.c$586$3$6 ==.
                           2534 ;	../fb_lpc922.c:586: if(telegramm[3]==eeprom[ADDRTAB+1] && telegramm[4]==eeprom[ADDRTAB+2]) {	// nur wenn es die eigene phys. Adr. ist
   076D 90 1D 17           2535 	mov	dptr,#(_eeprom + 0x0017)
   0770 E4                 2536 	clr	a
   0771 93                 2537 	movc	a,@a+dptr
   0772 FA                 2538 	mov	r2,a
   0773 EB                 2539 	mov	a,r3
   0774 B5 02 02           2540 	cjne	a,ar2,00233$
   0777 80 03              2541 	sjmp	00234$
   0779                    2542 00233$:
   0779 02s09rFE           2543 	ljmp	00177$
   077C                    2544 00234$:
   077C 90 1D 18           2545 	mov	dptr,#(_eeprom + 0x0018)
   077F E4                 2546 	clr	a
   0780 93                 2547 	movc	a,@a+dptr
   0781 FA                 2548 	mov	r2,a
   0782 B5*0B 02           2549 	cjne	a,(_telegramm + 0x0004),00235$
   0785 80 03              2550 	sjmp	00236$
   0787                    2551 00235$:
   0787 02s09rFE           2552 	ljmp	00177$
   078A                    2553 00236$:
                    078A   2554 	C$fb_lpc922.c$587$4$7 ==.
                           2555 ;	../fb_lpc922.c:587: connected_timeout=0;//wenn ein unicast uns betrifft den timeout ruecksetzen
   078A 75*2F 00           2556 	mov	_connected_timeout,#0x00
                    078D   2557 	C$fb_lpc922.c$590$4$7 ==.
                           2558 ;	../fb_lpc922.c:590: switch (tpdu) {	// transport layer control field
   078D BE 41 02           2559 	cjne	r6,#0x41,00237$
   0790 80 20              2560 	sjmp	00112$
   0792                    2561 00237$:
   0792 BE 42 02           2562 	cjne	r6,#0x42,00238$
   0795 80 2F              2563 	sjmp	00113$
   0797                    2564 00238$:
   0797 BE 43 03           2565 	cjne	r6,#0x43,00239$
   079A 02s08rDD           2566 	ljmp	00131$
   079D                    2567 00239$:
   079D BE 80 03           2568 	cjne	r6,#0x80,00240$
   07A0 02s09r03           2569 	ljmp	00136$
   07A3                    2570 00240$:
   07A3 BE 81 03           2571 	cjne	r6,#0x81,00241$
   07A6 02s09r25           2572 	ljmp	00139$
   07A9                    2573 00241$:
   07A9 BE 83 03           2574 	cjne	r6,#0x83,00242$
   07AC 02s09r3E           2575 	ljmp	00143$
   07AF                    2576 00242$:
   07AF 02s09rFE           2577 	ljmp	00177$
                    07B2   2578 	C$fb_lpc922.c$592$5$8 ==.
                           2579 ;	../fb_lpc922.c:592: case DATA_PDU_ADC_READ:
   07B2                    2580 00112$:
                    07B2   2581 	C$fb_lpc922.c$593$5$8 ==.
                           2582 ;	../fb_lpc922.c:593: mem_adrh = telegramm[7];    // Remember ADC Channel, reuse mem_adrh to save ram
   07B2 8D*04              2583 	mov	_mem_adrh,r5
                    07B4   2584 	C$fb_lpc922.c$594$5$8 ==.
                           2585 ;	../fb_lpc922.c:594: mem_adrl = telegramm[8];    // Remember sample count
   07B4 85*0F*05           2586 	mov	_mem_adrl,(_telegramm + 0x0008)
                    07B7   2587 	C$fb_lpc922.c$595$5$8 ==.
                           2588 ;	../fb_lpc922.c:595: send_obj_value(NCD_ACK_OWN);
   07B7 75 82 87           2589 	mov	dpl,#0x87
   07BA 12s06rAB           2590 	lcall	_send_obj_value
                    07BD   2591 	C$fb_lpc922.c$596$5$8 ==.
                           2592 ;	../fb_lpc922.c:596: send_obj_value(READ_ADC_RESPONSE);
   07BD 75 82 86           2593 	mov	dpl,#0x86
   07C0 12s06rAB           2594 	lcall	_send_obj_value
                    07C3   2595 	C$fb_lpc922.c$597$5$8 ==.
                           2596 ;	../fb_lpc922.c:597: break;
   07C3 02s09rFE           2597 	ljmp	00177$
                    07C6   2598 	C$fb_lpc922.c$600$5$8 ==.
                           2599 ;	../fb_lpc922.c:600: case DATA_PDU_MEMORY_OPERATIONS:
   07C6                    2600 00113$:
                    07C6   2601 	C$fb_lpc922.c$601$5$8 ==.
                           2602 ;	../fb_lpc922.c:601: if(connected){
   07C6 20*0D 03           2603 	jb	_connected,00243$
   07C9 02s09rFE           2604 	ljmp	00177$
   07CC                    2605 00243$:
                    07CC   2606 	C$fb_lpc922.c$602$6$9 ==.
                           2607 ;	../fb_lpc922.c:602: senders_pcount=telegramm[6]&0x3C;
   07CC 74 3C              2608 	mov	a,#0x3C
   07CE 5F                 2609 	anl	a,r7
   07CF F5*06              2610 	mov	_senders_pcount,a
                    07D1   2611 	C$fb_lpc922.c$603$6$9 ==.
                           2612 ;	../fb_lpc922.c:603: apdu &= 0xF0;						// da bei memory operations nur obere 4 Bits aktiv
   07D1 A8*00              2613 	mov	r0,_bp
   07D3 08                 2614 	inc	r0
   07D4 E6                 2615 	mov	a,@r0
   07D5 54 F0              2616 	anl	a,#0xF0
   07D7 F6                 2617 	mov	@r0,a
                    07D8   2618 	C$fb_lpc922.c$604$6$9 ==.
                           2619 ;	../fb_lpc922.c:604: if(apdu==WRITE_MEMORY_REQUEST) {	// 01pppp10 1000xxxx
   07D8 A8*00              2620 	mov	r0,_bp
   07DA 08                 2621 	inc	r0
   07DB B6 80 02           2622 	cjne	@r0,#0x80,00244$
   07DE 80 03              2623 	sjmp	00245$
   07E0                    2624 00244$:
   07E0 02s08rBC           2625 	ljmp	00126$
   07E3                    2626 00245$:
                    07E3   2627 	C$fb_lpc922.c$605$7$10 ==.
                           2628 ;	../fb_lpc922.c:605: send_obj_value(NCD_ACK);
   07E3 75 82 81           2629 	mov	dpl,#0x81
   07E6 12s06rAB           2630 	lcall	_send_obj_value
                    07E9   2631 	C$fb_lpc922.c$608$8$11 ==.
                           2632 ;	../fb_lpc922.c:608: ab=telegramm[7]&0x0F;		// Anzahl Bytes
   07E9 74 0F              2633 	mov	a,#0x0F
   07EB 55*0E              2634 	anl	a,(_telegramm + 0x0007)
   07ED FF                 2635 	mov	r7,a
                    07EE   2636 	C$fb_lpc922.c$610$8$11 ==.
                           2637 ;	../fb_lpc922.c:610: while(fb_state!=0);					// warten falls noch gesendet wird
   07EE                    2638 00114$:
   07EE E5*2A              2639 	mov	a,_fb_state
   07F0 70 FC              2640 	jnz	00114$
                    07F2   2641 	C$fb_lpc922.c$612$8$11 ==.
                           2642 ;	../fb_lpc922.c:612: EA=0;
   07F2 C2 AF              2643 	clr	_IEN0_7
                    07F4   2644 	C$fb_lpc922.c$613$8$11 ==.
                           2645 ;	../fb_lpc922.c:613: START_WRITECYCLE;					// load command, leert das pageregister
   07F4 75 E4 00           2646 	mov	_FMCON,#0x00
                    07F7   2647 	C$fb_lpc922.c$614$9$12 ==.
                           2648 ;	../fb_lpc922.c:614: for(n=0;n<ab;n++) {
   07F7 AA*0F              2649 	mov	r2,(_telegramm + 0x0008)
   07F9 74 01              2650 	mov	a,#0x01
   07FB 5A                 2651 	anl	a,r2
   07FC 24 1C              2652 	add	a,#0x1C
   07FE FB                 2653 	mov	r3,a
   07FF AE*10              2654 	mov	r6,(_telegramm + 0x0009)
   0801 A8*00              2655 	mov	r0,_bp
   0803 08                 2656 	inc	r0
   0804 08                 2657 	inc	r0
   0805 76 00              2658 	mov	@r0,#0x00
   0807                    2659 00173$:
   0807 A8*00              2660 	mov	r0,_bp
   0809 08                 2661 	inc	r0
   080A 08                 2662 	inc	r0
   080B C3                 2663 	clr	c
   080C E6                 2664 	mov	a,@r0
   080D 9F                 2665 	subb	a,r7
   080E 40 03              2666 	jc	00247$
   0810 02s08rB7           2667 	ljmp	00176$
   0813                    2668 00247$:
                    0813   2669 	C$fb_lpc922.c$615$9$12 ==.
                           2670 ;	../fb_lpc922.c:615: if(telegramm[8]==0)
   0813 EA                 2671 	mov	a,r2
   0814 70 3C              2672 	jnz	00120$
                    0816   2673 	C$fb_lpc922.c$617$1$1 ==.
                           2674 ;	../fb_lpc922.c:617: if((telegramm[9]+n)==0x60) status60=telegramm[10+n];
   0816 C0 02              2675 	push	ar2
   0818 E5*00              2676 	mov	a,_bp
   081A 24 03              2677 	add	a,#0x03
   081C F8                 2678 	mov	r0,a
   081D A6 06              2679 	mov	@r0,ar6
   081F 08                 2680 	inc	r0
   0820 76 00              2681 	mov	@r0,#0x00
   0822 A8*00              2682 	mov	r0,_bp
   0824 08                 2683 	inc	r0
   0825 08                 2684 	inc	r0
   0826 86 04              2685 	mov	ar4,@r0
   0828 7D 00              2686 	mov	r5,#0x00
   082A E5*00              2687 	mov	a,_bp
   082C 24 03              2688 	add	a,#0x03
   082E F8                 2689 	mov	r0,a
   082F EC                 2690 	mov	a,r4
   0830 26                 2691 	add	a,@r0
   0831 FC                 2692 	mov	r4,a
   0832 ED                 2693 	mov	a,r5
   0833 08                 2694 	inc	r0
   0834 36                 2695 	addc	a,@r0
   0835 FD                 2696 	mov	r5,a
   0836 BC 60 05           2697 	cjne	r4,#0x60,00249$
   0839 BD 00 02           2698 	cjne	r5,#0x00,00249$
   083C 80 04              2699 	sjmp	00250$
   083E                    2700 00249$:
   083E D0 02              2701 	pop	ar2
   0840 80 26              2702 	sjmp	00121$
   0842                    2703 00250$:
   0842 D0 02              2704 	pop	ar2
   0844 A8*00              2705 	mov	r0,_bp
   0846 08                 2706 	inc	r0
   0847 08                 2707 	inc	r0
   0848 74 0A              2708 	mov	a,#0x0A
   084A 26                 2709 	add	a,@r0
   084B 24r07              2710 	add	a,#_telegramm
   084D F9                 2711 	mov	r1,a
   084E 87*2E              2712 	mov	_status60,@r1
   0850 80 16              2713 	sjmp	00121$
   0852                    2714 00120$:
                    0852   2715 	C$fb_lpc922.c$628$10$14 ==.
                           2716 ;	../fb_lpc922.c:628: WRITE_BYTE(telegramm[8],telegramm[9]+n,telegramm[n+10]);
   0852 8B E7              2717 	mov	_FMADRH,r3
   0854 A8*00              2718 	mov	r0,_bp
   0856 08                 2719 	inc	r0
   0857 08                 2720 	inc	r0
   0858 E6                 2721 	mov	a,@r0
   0859 2E                 2722 	add	a,r6
   085A F5 E6              2723 	mov	_FMADRL,a
   085C A8*00              2724 	mov	r0,_bp
   085E 08                 2725 	inc	r0
   085F 08                 2726 	inc	r0
   0860 74 0A              2727 	mov	a,#0x0A
   0862 26                 2728 	add	a,@r0
   0863 24r07              2729 	add	a,#_telegramm
   0865 F9                 2730 	mov	r1,a
   0866 87 E5              2731 	mov	_FMDATA,@r1
   0868                    2732 00121$:
                    0868   2733 	C$fb_lpc922.c$630$9$12 ==.
                           2734 ;	../fb_lpc922.c:630: if ((((telegramm[9]+n)&0x3F)==0x3F) && n!=(ab-1)) {		// Ende des 64-Byte Pageregisters, also zwischendurch flashen
   0868 8E 04              2735 	mov	ar4,r6
   086A 7D 00              2736 	mov	r5,#0x00
   086C A8*00              2737 	mov	r0,_bp
   086E 08                 2738 	inc	r0
   086F 08                 2739 	inc	r0
   0870 E5*00              2740 	mov	a,_bp
   0872 24 03              2741 	add	a,#0x03
   0874 F9                 2742 	mov	r1,a
   0875 E6                 2743 	mov	a,@r0
   0876 F7                 2744 	mov	@r1,a
   0877 09                 2745 	inc	r1
   0878 77 00              2746 	mov	@r1,#0x00
   087A E5*00              2747 	mov	a,_bp
   087C 24 03              2748 	add	a,#0x03
   087E F8                 2749 	mov	r0,a
   087F E6                 2750 	mov	a,@r0
   0880 2C                 2751 	add	a,r4
   0881 FC                 2752 	mov	r4,a
   0882 08                 2753 	inc	r0
   0883 E6                 2754 	mov	a,@r0
   0884 3D                 2755 	addc	a,r5
   0885 53 04 3F           2756 	anl	ar4,#0x3F
   0888 7D 00              2757 	mov	r5,#0x00
   088A BC 3F 22           2758 	cjne	r4,#0x3F,00175$
   088D BD 00 1F           2759 	cjne	r5,#0x00,00175$
   0890 8F 04              2760 	mov	ar4,r7
   0892 7D 00              2761 	mov	r5,#0x00
   0894 1C                 2762 	dec	r4
   0895 BC FF 01           2763 	cjne	r4,#0xFF,00253$
   0898 1D                 2764 	dec	r5
   0899                    2765 00253$:
   0899 E5*00              2766 	mov	a,_bp
   089B 24 03              2767 	add	a,#0x03
   089D F8                 2768 	mov	r0,a
   089E E6                 2769 	mov	a,@r0
   089F B5 04 07           2770 	cjne	a,ar4,00254$
   08A2 08                 2771 	inc	r0
   08A3 E6                 2772 	mov	a,@r0
   08A4 B5 05 02           2773 	cjne	a,ar5,00254$
   08A7 80 06              2774 	sjmp	00175$
   08A9                    2775 00254$:
                    08A9   2776 	C$fb_lpc922.c$631$10$15 ==.
                           2777 ;	../fb_lpc922.c:631: STOP_WRITECYCLE;			// write command, schreibt pageregister ins flash und versetzt CPU in idle fuer 4ms
   08A9 75 E4 68           2778 	mov	_FMCON,#0x68
                    08AC   2779 	C$fb_lpc922.c$632$10$15 ==.
                           2780 ;	../fb_lpc922.c:632: START_WRITECYCLE;		// load command, leert das pageregister
   08AC 75 E4 00           2781 	mov	_FMCON,#0x00
   08AF                    2782 00175$:
                    08AF   2783 	C$fb_lpc922.c$614$8$11 ==.
                           2784 ;	../fb_lpc922.c:614: for(n=0;n<ab;n++) {
   08AF A8*00              2785 	mov	r0,_bp
   08B1 08                 2786 	inc	r0
   08B2 08                 2787 	inc	r0
   08B3 06                 2788 	inc	@r0
   08B4 02s08r07           2789 	ljmp	00173$
   08B7                    2790 00176$:
                    08B7   2791 	C$fb_lpc922.c$635$8$11 ==.
                           2792 ;	../fb_lpc922.c:635: STOP_WRITECYCLE;					// write command, schreibt pageregister ins flash und versetzt CPU in idle fuer 4ms
   08B7 75 E4 68           2793 	mov	_FMCON,#0x68
                    08BA   2794 	C$fb_lpc922.c$636$8$11 ==.
                           2795 ;	../fb_lpc922.c:636: EA=1;
   08BA D2 AF              2796 	setb	_IEN0_7
   08BC                    2797 00126$:
                    08BC   2798 	C$fb_lpc922.c$639$6$9 ==.
                           2799 ;	../fb_lpc922.c:639: if(apdu==READ_MEMORY_REQUEST) {		// 01pppp10 0000xxxx
   08BC A8*00              2800 	mov	r0,_bp
   08BE 08                 2801 	inc	r0
   08BF E6                 2802 	mov	a,@r0
   08C0 60 03              2803 	jz	00255$
   08C2 02s09rFE           2804 	ljmp	00177$
   08C5                    2805 00255$:
                    08C5   2806 	C$fb_lpc922.c$640$7$16 ==.
                           2807 ;	../fb_lpc922.c:640: mem_length=telegramm[7];		// Anzahl Bytes fuer spaeteres(!) memory Auslesen
   08C5 85*0E*03           2808 	mov	_mem_length,(_telegramm + 0x0007)
                    08C8   2809 	C$fb_lpc922.c$641$7$16 ==.
                           2810 ;	../fb_lpc922.c:641: mem_adrh = telegramm[8];		// Adresse
   08C8 85*0F*04           2811 	mov	_mem_adrh,(_telegramm + 0x0008)
                    08CB   2812 	C$fb_lpc922.c$642$7$16 ==.
                           2813 ;	../fb_lpc922.c:642: mem_adrl = telegramm[9];
   08CB 85*10*05           2814 	mov	_mem_adrl,(_telegramm + 0x0009)
                    08CE   2815 	C$fb_lpc922.c$643$7$16 ==.
                           2816 ;	../fb_lpc922.c:643: send_obj_value(NCD_ACK);
   08CE 75 82 81           2817 	mov	dpl,#0x81
   08D1 12s06rAB           2818 	lcall	_send_obj_value
                    08D4   2819 	C$fb_lpc922.c$644$7$16 ==.
                           2820 ;	../fb_lpc922.c:644: send_obj_value(READ_MEMORY_RESPONSE);
   08D4 75 82 84           2821 	mov	dpl,#0x84
   08D7 12s06rAB           2822 	lcall	_send_obj_value
                    08DA   2823 	C$fb_lpc922.c$647$5$8 ==.
                           2824 ;	../fb_lpc922.c:647: break;
   08DA 02s09rFE           2825 	ljmp	00177$
                    08DD   2826 	C$fb_lpc922.c$649$5$8 ==.
                           2827 ;	../fb_lpc922.c:649: case DATA_PDU_MISC_OPERATIONS:
   08DD                    2828 00131$:
                    08DD   2829 	C$fb_lpc922.c$650$5$8 ==.
                           2830 ;	../fb_lpc922.c:650: senders_pcount=telegramm[6]&0x3C;
   08DD 74 3C              2831 	mov	a,#0x3C
   08DF 5F                 2832 	anl	a,r7
   08E0 F5*06              2833 	mov	_senders_pcount,a
                    08E2   2834 	C$fb_lpc922.c$651$5$8 ==.
                           2835 ;	../fb_lpc922.c:651: if(apdu==RESTART_REQUEST) {		// 01pppp11 10000000
   08E2 A8*00              2836 	mov	r0,_bp
   08E4 08                 2837 	inc	r0
   08E5 B6 80 03           2838 	cjne	@r0,#0x80,00133$
                    08E8   2839 	C$fb_lpc922.c$652$6$17 ==.
                           2840 ;	../fb_lpc922.c:652: AUXR1|=0x08;				// Software Reset
   08E8 43 A2 08           2841 	orl	_AUXR1,#0x08
   08EB                    2842 00133$:
                    08EB   2843 	C$fb_lpc922.c$654$5$8 ==.
                           2844 ;	../fb_lpc922.c:654: if(apdu==READ_MASK_VERSION_REQUEST) {		// 01pppp11 00000000
   08EB A8*00              2845 	mov	r0,_bp
   08ED 08                 2846 	inc	r0
   08EE E6                 2847 	mov	a,@r0
   08EF 60 03              2848 	jz	00258$
   08F1 02s09rFE           2849 	ljmp	00177$
   08F4                    2850 00258$:
                    08F4   2851 	C$fb_lpc922.c$655$6$18 ==.
                           2852 ;	../fb_lpc922.c:655: send_obj_value(NCD_ACK);
   08F4 75 82 81           2853 	mov	dpl,#0x81
   08F7 12s06rAB           2854 	lcall	_send_obj_value
                    08FA   2855 	C$fb_lpc922.c$656$6$18 ==.
                           2856 ;	../fb_lpc922.c:656: send_obj_value(READ_MASK_VERSION_RESPONSE);
   08FA 75 82 82           2857 	mov	dpl,#0x82
   08FD 12s06rAB           2858 	lcall	_send_obj_value
                    0900   2859 	C$fb_lpc922.c$658$5$8 ==.
                           2860 ;	../fb_lpc922.c:658: break;
   0900 02s09rFE           2861 	ljmp	00177$
                    0903   2862 	C$fb_lpc922.c$660$5$8 ==.
                           2863 ;	../fb_lpc922.c:660: case CONNECT_PDU:	// 10000000 xxxxxxxx
   0903                    2864 00136$:
                    0903   2865 	C$fb_lpc922.c$661$5$8 ==.
                           2866 ;	../fb_lpc922.c:661: if(!connected) {				// wenn bereits verbunden: ignorieren
   0903 30*0D 03           2867 	jnb	_connected,00259$
   0906 02s09rFE           2868 	ljmp	00177$
   0909                    2869 00259$:
                    0909   2870 	C$fb_lpc922.c$662$6$19 ==.
                           2871 ;	../fb_lpc922.c:662: connected=1;
   0909 D2*0D              2872 	setb	_connected
                    090B   2873 	C$fb_lpc922.c$663$6$19 ==.
                           2874 ;	../fb_lpc922.c:663: conh=telegramm[1];			// phys. Adresse des Verbindungspartners
   090B 85*08*00           2875 	mov	_conh,(_telegramm + 0x0001)
                    090E   2876 	C$fb_lpc922.c$664$6$19 ==.
                           2877 ;	../fb_lpc922.c:664: conl=telegramm[2];
   090E 85*09*01           2878 	mov	_conl,(_telegramm + 0x0002)
                    0911   2879 	C$fb_lpc922.c$665$6$19 ==.
                           2880 ;	../fb_lpc922.c:665: pcount=0;					// Paketzaehler zuruecksetzen
   0911 75*02 00           2881 	mov	_pcount,#0x00
                    0914   2882 	C$fb_lpc922.c$666$6$19 ==.
                           2883 ;	../fb_lpc922.c:666: inc_pcount=0;
   0914 C2*0E              2884 	clr	_inc_pcount
                    0916   2885 	C$fb_lpc922.c$667$6$19 ==.
                           2886 ;	../fb_lpc922.c:667: RTCCON=0x60;	//RTC stoppen
   0916 75 D1 60           2887 	mov	_RTCCON,#0x60
                    0919   2888 	C$fb_lpc922.c$668$6$19 ==.
                           2889 ;	../fb_lpc922.c:668: RTCH=0x0B;      // reload Real Time Clock, 52ms
   0919 75 D2 0B           2890 	mov	_RTCH,#0x0B
                    091C   2891 	C$fb_lpc922.c$669$6$19 ==.
                           2892 ;	../fb_lpc922.c:669: RTCL=0xB3;
   091C 75 D3 B3           2893 	mov	_RTCL,#0xB3
                    091F   2894 	C$fb_lpc922.c$670$6$19 ==.
                           2895 ;	../fb_lpc922.c:670: RTCCON=0x61;	// RTC starten
   091F 75 D1 61           2896 	mov	_RTCCON,#0x61
                    0922   2897 	C$fb_lpc922.c$673$5$8 ==.
                           2898 ;	../fb_lpc922.c:673: break;
   0922 02s09rFE           2899 	ljmp	00177$
                    0925   2900 	C$fb_lpc922.c$675$5$8 ==.
                           2901 ;	../fb_lpc922.c:675: case DISCONNECT_PDU:	// 10000001 xxxxxxxx
   0925                    2902 00139$:
                    0925   2903 	C$fb_lpc922.c$676$5$8 ==.
                           2904 ;	../fb_lpc922.c:676: if(conh==telegramm[1] && conl==telegramm[2] )	{	// nur abbauen, wenn verbunden und Anforderung vom Verbindungspartner, kein ACK senden
   0925 E5*08              2905 	mov	a,(_telegramm + 0x0001)
   0927 B5*00 02           2906 	cjne	a,_conh,00260$
   092A 80 03              2907 	sjmp	00261$
   092C                    2908 00260$:
   092C 02s09rFE           2909 	ljmp	00177$
   092F                    2910 00261$:
   092F E5*09              2911 	mov	a,(_telegramm + 0x0002)
   0931 B5*01 02           2912 	cjne	a,_conl,00262$
   0934 80 03              2913 	sjmp	00263$
   0936                    2914 00262$:
   0936 02s09rFE           2915 	ljmp	00177$
   0939                    2916 00263$:
                    0939   2917 	C$fb_lpc922.c$677$6$20 ==.
                           2918 ;	../fb_lpc922.c:677: connected=0;// warum: && connected ???
   0939 C2*0D              2919 	clr	_connected
                    093B   2920 	C$fb_lpc922.c$679$5$8 ==.
                           2921 ;	../fb_lpc922.c:679: break;
   093B 02s09rFE           2922 	ljmp	00177$
                    093E   2923 	C$fb_lpc922.c$681$5$8 ==.
                           2924 ;	../fb_lpc922.c:681: case NACK_PDU:	// 11pppp11 xxxxxxxx
   093E                    2925 00143$:
                    093E   2926 	C$fb_lpc922.c$682$5$8 ==.
                           2927 ;	../fb_lpc922.c:682: send_obj_value(T_DISCONNECT);
   093E 75 82 85           2928 	mov	dpl,#0x85
   0941 12s06rAB           2929 	lcall	_send_obj_value
                    0944   2930 	C$fb_lpc922.c$683$5$8 ==.
                           2931 ;	../fb_lpc922.c:683: connected=0;//connected_timeout=111; spartipp 5 Byte wenn send.. weg kommt.
   0944 C2*0D              2932 	clr	_connected
                    0946   2933 	C$fb_lpc922.c$685$1$5 ==.
                           2934 ;	../fb_lpc922.c:685: }
   0946 02s09rFE           2935 	ljmp	00177$
   0949                    2936 00167$:
                    0949   2937 	C$fb_lpc922.c$690$2$5 ==.
                           2938 ;	../fb_lpc922.c:690: else if(tpdu==GROUP_PDU){
   0949 EE                 2939 	mov	a,r6
   094A 60 03              2940 	jz	00264$
   094C 02s09rFE           2941 	ljmp	00177$
   094F                    2942 00264$:
                    094F   2943 	C$fb_lpc922.c$695$3$21 ==.
                           2944 ;	../fb_lpc922.c:695: gapos = gapos_in_gat(telegramm[3], telegramm[4]);
   094F C0*0B              2945 	push	(_telegramm + 0x0004)
   0951 8B 82              2946 	mov	dpl,r3
   0953 12s06r5D           2947 	lcall	_gapos_in_gat
   0956 AF 82              2948 	mov	r7,dpl
   0958 15 81              2949 	dec	sp
                    095A   2950 	C$fb_lpc922.c$697$3$21 ==.
                           2951 ;	../fb_lpc922.c:697: if (gapos != 0xFF)
   095A BF FF 03           2952 	cjne	r7,#0xFF,00265$
   095D 02s09rFE           2953 	ljmp	00177$
   0960                    2954 00265$:
                    0960   2955 	C$fb_lpc922.c$699$4$22 ==.
                           2956 ;	../fb_lpc922.c:699: atp = eeprom[ASSOCTABPTR];  // Association Table Pointer
   0960 90 1D 11           2957 	mov	dptr,#(_eeprom + 0x0011)
   0963 E4                 2958 	clr	a
   0964 93                 2959 	movc	a,@a+dptr
                    0965   2960 	C$fb_lpc922.c$700$4$22 ==.
                           2961 ;	../fb_lpc922.c:700: assmax = atp + eeprom[atp] * 2;	// Erster Eintrag = Anzahl Eintraege
   0965 FE                 2962 	mov	r6,a
   0966 F5 82              2963 	mov	dpl,a
   0968 75 83 1D           2964 	mov	dph,#(_eeprom >> 8)
   096B E4                 2965 	clr	a
   096C 93                 2966 	movc	a,@a+dptr
   096D 25 E0              2967 	add	a,acc
   096F 2E                 2968 	add	a,r6
   0970 FD                 2969 	mov	r5,a
                    0971   2970 	C$fb_lpc922.c$704$4$22 ==.
                           2971 ;	../fb_lpc922.c:704: for (asspos = atp + 1; asspos < assmax; asspos+=2)
   0971 0E                 2972 	inc	r6
   0972 A8*00              2973 	mov	r0,_bp
   0974 08                 2974 	inc	r0
   0975 74 C0              2975 	mov	a,#0xC0
   0977 56                 2976 	anl	a,@r0
   0978 FC                 2977 	mov	r4,a
   0979 E4                 2978 	clr	a
   097A BC 80 01           2979 	cjne	r4,#0x80,00266$
   097D 04                 2980 	inc	a
   097E                    2981 00266$:
   097E FC                 2982 	mov	r4,a
   097F                    2983 00158$:
   097F C3                 2984 	clr	c
   0980 EE                 2985 	mov	a,r6
   0981 9D                 2986 	subb	a,r5
   0982 40 03              2987 	jc	00268$
   0984 02s09rFE           2988 	ljmp	00177$
   0987                    2989 00268$:
                    0987   2990 	C$fb_lpc922.c$708$5$23 ==.
                           2991 ;	../fb_lpc922.c:708: if (gapos == eeprom[asspos])
   0987 8E 82              2992 	mov	dpl,r6
   0989 75 83 1D           2993 	mov	dph,#(_eeprom >> 8)
   098C E4                 2994 	clr	a
   098D 93                 2995 	movc	a,@a+dptr
   098E FB                 2996 	mov	r3,a
   098F EF                 2997 	mov	a,r7
   0990 B5 03 66           2998 	cjne	a,ar3,00160$
                    0993   2999 	C$fb_lpc922.c$710$6$24 ==.
                           3000 ;	../fb_lpc922.c:710: objno = eeprom[asspos + 1];	     // Objektnummer
   0993 EE                 3001 	mov	a,r6
   0994 04                 3002 	inc	a
   0995 90 1D 00           3003 	mov	dptr,#_eeprom
   0998 93                 3004 	movc	a,@a+dptr
                    0999   3005 	C$fb_lpc922.c$711$6$24 ==.
                           3006 ;	../fb_lpc922.c:711: objflags = read_objflags(objno); // Objekt Flags lesen
   0999 FB                 3007 	mov	r3,a
   099A F5 82              3008 	mov	dpl,a
   099C C0 07              3009 	push	ar7
   099E C0 06              3010 	push	ar6
   09A0 C0 05              3011 	push	ar5
   09A2 C0 04              3012 	push	ar4
   09A4 C0 03              3013 	push	ar3
   09A6 12s0Ar04           3014 	lcall	_read_objflags
   09A9 AA 82              3015 	mov	r2,dpl
   09AB D0 03              3016 	pop	ar3
   09AD D0 04              3017 	pop	ar4
   09AF D0 05              3018 	pop	ar5
   09B1 D0 06              3019 	pop	ar6
   09B3 D0 07              3020 	pop	ar7
                    09B5   3021 	C$fb_lpc922.c$714$6$24 ==.
                           3022 ;	../fb_lpc922.c:714: if((apdu&0xC0)==WRITE_GROUP)
   09B5 EC                 3023 	mov	a,r4
   09B6 60 2E              3024 	jz	00151$
                    09B8   3025 	C$fb_lpc922.c$719$1$1 ==.
                           3026 ;	../fb_lpc922.c:719: if ((objflags & 0x14) == 0x14)
   09B8 C0 04              3027 	push	ar4
   09BA 74 14              3028 	mov	a,#0x14
   09BC 5A                 3029 	anl	a,r2
   09BD FC                 3030 	mov	r4,a
   09BE BC 14 02           3031 	cjne	r4,#0x14,00272$
   09C1 80 04              3032 	sjmp	00273$
   09C3                    3033 00272$:
   09C3 D0 04              3034 	pop	ar4
   09C5 80 1F              3035 	sjmp	00151$
   09C7                    3036 00273$:
   09C7 D0 04              3037 	pop	ar4
                    09C9   3038 	C$fb_lpc922.c$720$7$25 ==.
                           3039 ;	../fb_lpc922.c:720: write_value_req(objno);
   09C9 8B 82              3040 	mov	dpl,r3
   09CB C0 07              3041 	push	ar7
   09CD C0 06              3042 	push	ar6
   09CF C0 05              3043 	push	ar5
   09D1 C0 04              3044 	push	ar4
   09D3 C0 03              3045 	push	ar3
   09D5 C0 02              3046 	push	ar2
   09D7 12s00r00           3047 	lcall	_write_value_req
   09DA D0 02              3048 	pop	ar2
   09DC D0 03              3049 	pop	ar3
   09DE D0 04              3050 	pop	ar4
   09E0 D0 05              3051 	pop	ar5
   09E2 D0 06              3052 	pop	ar6
   09E4 D0 07              3053 	pop	ar7
   09E6                    3054 00151$:
                    09E6   3055 	C$fb_lpc922.c$722$6$24 ==.
                           3056 ;	../fb_lpc922.c:722: if(apdu==READ_GROUP_REQUEST)
   09E6 A8*00              3057 	mov	r0,_bp
   09E8 08                 3058 	inc	r0
   09E9 E6                 3059 	mov	a,@r0
   09EA 70 0D              3060 	jnz	00160$
                    09EC   3061 	C$fb_lpc922.c$724$7$26 ==.
                           3062 ;	../fb_lpc922.c:724: if ((objflags & 0x0C) == 0x0C)
   09EC 53 02 0C           3063 	anl	ar2,#0x0C
   09EF BA 0C 0C           3064 	cjne	r2,#0x0C,00177$
                    09F2   3065 	C$fb_lpc922.c$725$7$26 ==.
                           3066 ;	../fb_lpc922.c:725: read_value_req(objno);	// Objektwert lesen und read_value_response senden	00000000 00000000
   09F2 8B 82              3067 	mov	dpl,r3
   09F4 12s00r00           3068 	lcall	_read_value_req
                    09F7   3069 	C$fb_lpc922.c$726$7$26 ==.
                           3070 ;	../fb_lpc922.c:726: break;
   09F7 80 05              3071 	sjmp	00177$
   09F9                    3072 00160$:
                    09F9   3073 	C$fb_lpc922.c$704$4$22 ==.
                           3074 ;	../fb_lpc922.c:704: for (asspos = atp + 1; asspos < assmax; asspos+=2)
   09F9 0E                 3075 	inc	r6
   09FA 0E                 3076 	inc	r6
   09FB 02s09r7F           3077 	ljmp	00158$
   09FE                    3078 00177$:
   09FE 85*00 81           3079 	mov	sp,_bp
   0A01 D0*00              3080 	pop	_bp
                    0A03   3081 	C$fb_lpc922.c$733$1$1 ==.
                    0A03   3082 	XG$process_tel$0$0 ==.
   0A03 22                 3083 	ret
                           3084 ;------------------------------------------------------------
                           3085 ;Allocation info for local variables in function 'read_objflags'
                           3086 ;------------------------------------------------------------
                           3087 ;objno                     Allocated to registers r7 
                           3088 ;------------------------------------------------------------
                    0A04   3089 	G$read_objflags$0$0 ==.
                    0A04   3090 	C$fb_lpc922.c$782$1$1 ==.
                           3091 ;	../fb_lpc922.c:782: unsigned char read_objflags(unsigned char objno)
                           3092 ;	-----------------------------------------
                           3093 ;	 function read_objflags
                           3094 ;	-----------------------------------------
   0A04                    3095 _read_objflags:
   0A04 AF 82              3096 	mov	r7,dpl
                    0A06   3097 	C$fb_lpc922.c$785$1$1 ==.
                           3098 ;	../fb_lpc922.c:785: return(eeprom[eeprom[COMMSTABPTR]+3+objno+objno+objno]);
   0A06 90 1D 12           3099 	mov	dptr,#(_eeprom + 0x0012)
   0A09 E4                 3100 	clr	a
   0A0A 93                 3101 	movc	a,@a+dptr
   0A0B FE                 3102 	mov	r6,a
   0A0C 0E                 3103 	inc	r6
   0A0D 0E                 3104 	inc	r6
   0A0E 0E                 3105 	inc	r6
   0A0F EF                 3106 	mov	a,r7
   0A10 2E                 3107 	add	a,r6
   0A11 2F                 3108 	add	a,r7
   0A12 2F                 3109 	add	a,r7
   0A13 90 1D 00           3110 	mov	dptr,#_eeprom
   0A16 93                 3111 	movc	a,@a+dptr
                    0A17   3112 	C$fb_lpc922.c$786$1$1 ==.
                    0A17   3113 	XG$read_objflags$0$0 ==.
   0A17 F5 82              3114 	mov	dpl,a
   0A19 22                 3115 	ret
                           3116 ;------------------------------------------------------------
                           3117 ;Allocation info for local variables in function 'restart_hw'
                           3118 ;------------------------------------------------------------
                    0A1A   3119 	G$restart_hw$0$0 ==.
                    0A1A   3120 	C$fb_lpc922.c$821$1$1 ==.
                           3121 ;	../fb_lpc922.c:821: void restart_hw(void)
                           3122 ;	-----------------------------------------
                           3123 ;	 function restart_hw
                           3124 ;	-----------------------------------------
   0A1A                    3125 _restart_hw:
                    0A1A   3126 	C$fb_lpc922.c$823$1$1 ==.
                           3127 ;	../fb_lpc922.c:823: DIVM=0;			// Taktferquenz nicht teilen -> volles Tempo
   0A1A 75 95 00           3128 	mov	_DIVM,#0x00
                    0A1D   3129 	C$fb_lpc922.c$825$1$1 ==.
                           3130 ;	../fb_lpc922.c:825: P1M1=0x14;		// Port 1 auf quasi-bidirektional,
   0A1D 75 91 14           3131 	mov	_P1M1,#0x14
                    0A20   3132 	C$fb_lpc922.c$826$1$1 ==.
                           3133 ;	../fb_lpc922.c:826: P1M2=0x4C;		// ausser P1.2(T0 als PWM Ausgang)=open-drain,
   0A20 75 92 4C           3134 	mov	_P1M2,#0x4C
                    0A23   3135 	C$fb_lpc922.c$830$1$1 ==.
                           3136 ;	../fb_lpc922.c:830: FBOUTC=0;		// Bus-Ausgang auf low
   0A23 C2 96              3137 	clr	_P1_6
                    0A25   3138 	C$fb_lpc922.c$832$1$1 ==.
                           3139 ;	../fb_lpc922.c:832: TMOD=0x21;		// Timer 0 als 16-Bit Timer, Timer 1 als 8 Bit autoreload
   0A25 75 89 21           3140 	mov	_TMOD,#0x21
                    0A28   3141 	C$fb_lpc922.c$833$1$1 ==.
                           3142 ;	../fb_lpc922.c:833: TAMOD=0x00;
   0A28 75 8F 00           3143 	mov	_TAMOD,#0x00
                    0A2B   3144 	C$fb_lpc922.c$834$1$1 ==.
                           3145 ;	../fb_lpc922.c:834: TR0=0;			// Timer 0 (zur Verwendung in app) zunaechst stoppen
   0A2B C2 8C              3146 	clr	_TCON_4
                    0A2D   3147 	C$fb_lpc922.c$835$1$1 ==.
                           3148 ;	../fb_lpc922.c:835: TR1=0;			// Timer 1 (Empfangs-Timer, nicht in app verwenden!) zunaechst stoppen
   0A2D C2 8E              3149 	clr	_TCON_6
                    0A2F   3150 	C$fb_lpc922.c$836$1$1 ==.
                           3151 ;	../fb_lpc922.c:836: TH1=128;		// Timer 1 auf 104us/3
   0A2F 75 8D 80           3152 	mov	_TH1,#0x80
                    0A32   3153 	C$fb_lpc922.c$837$1$1 ==.
                           3154 ;	../fb_lpc922.c:837: TL1=128;
   0A32 75 8B 80           3155 	mov	_TL1,#0x80
                    0A35   3156 	C$fb_lpc922.c$838$1$1 ==.
                           3157 ;	../fb_lpc922.c:838: TF1=0;
   0A35 C2 8F              3158 	clr	_TCON_7
                    0A37   3159 	C$fb_lpc922.c$845$1$1 ==.
                           3160 ;	../fb_lpc922.c:845: interrupted=0;	// wird durch die interrupt-routine auf 1 gesetzt
   0A37 C2*01              3161 	clr	_interrupted
                    0A39   3162 	C$fb_lpc922.c$846$1$1 ==.
                           3163 ;	../fb_lpc922.c:846: IEN0=0x80;// mit 0x80 sind die unten auskommentierten erschlagen.
   0A39 75 A8 80           3164 	mov	_IEN0,#0x80
                    0A3C   3165 	C$fb_lpc922.c$847$1$1 ==.
                           3166 ;	../fb_lpc922.c:847: IEN1=0x00;
   0A3C 75 E8 00           3167 	mov	_IEN1,#0x00
                    0A3F   3168 	C$fb_lpc922.c$854$1$1 ==.
                           3169 ;	../fb_lpc922.c:854: IP0=0x04;		// hÃ¶chste PrioritÃ¤t fuer ext1
   0A3F 75 B8 04           3170 	mov	_IP0,#0x04
                    0A42   3171 	C$fb_lpc922.c$855$1$1 ==.
                           3172 ;	../fb_lpc922.c:855: IP0H=0x0C;
   0A42 75 B7 0C           3173 	mov	_IP0H,#0x0C
                    0A45   3174 	C$fb_lpc922.c$856$1$1 ==.
                           3175 ;	../fb_lpc922.c:856: IT1=1;			// Interrupt 1 flankengetriggert=1
   0A45 D2 8A              3176 	setb	_TCON_2
                    0A47   3177 	C$fb_lpc922.c$858$1$1 ==.
                           3178 ;	../fb_lpc922.c:858: status60=0x2E;	// Status-Byte (steht normal im userram an 0x60)
   0A47 75*2E 2E           3179 	mov	_status60,#0x2E
                    0A4A   3180 	C$fb_lpc922.c$860$1$1 ==.
                           3181 ;	../fb_lpc922.c:860: ack=0;			// ack und nack flag zurÃ¼cksetzen
   0A4A C2*03              3182 	clr	_ack
                    0A4C   3183 	C$fb_lpc922.c$861$1$1 ==.
                           3184 ;	../fb_lpc922.c:861: nack=0;
   0A4C C2*04              3185 	clr	_nack
                    0A4E   3186 	C$fb_lpc922.c$862$1$1 ==.
                           3187 ;	../fb_lpc922.c:862: send_ack=0;
   0A4E C2*0B              3188 	clr	_send_ack
                    0A50   3189 	C$fb_lpc922.c$863$1$1 ==.
                           3190 ;	../fb_lpc922.c:863: send_nack=0;
   0A50 C2*0C              3191 	clr	_send_nack
                    0A52   3192 	C$fb_lpc922.c$864$1$1 ==.
                           3193 ;	../fb_lpc922.c:864: tel_arrived=0;	// kein Telegramm empfangen
   0A52 C2*06              3194 	clr	_tel_arrived
                    0A54   3195 	C$fb_lpc922.c$865$1$1 ==.
                           3196 ;	../fb_lpc922.c:865: auto_ack=1;		// empfangene Telegramme automatisch mit ack bestaetigen
   0A54 D2*08              3197 	setb	_auto_ack
                    0A56   3198 	C$fb_lpc922.c$866$1$1 ==.
                           3199 ;	../fb_lpc922.c:866: tx_nextwrite=0;	// Zeiger auf naechste zu schreibende Objektnr. in tx_buffer
   0A56 75*2C 00           3200 	mov	_tx_nextwrite,#0x00
                    0A59   3201 	C$fb_lpc922.c$867$1$1 ==.
                           3202 ;	../fb_lpc922.c:867: tx_nextsend=0;	// Zeiger auf naechste zu sendende Objektnr. in tx_buffer
   0A59 75*2D 00           3203 	mov	_tx_nextsend,#0x00
                    0A5C   3204 	C$fb_lpc922.c$868$1$1 ==.
                           3205 ;	../fb_lpc922.c:868: pcount=0;		// Paketzaehler initialisieren
   0A5C 75*02 00           3206 	mov	_pcount,#0x00
                    0A5F   3207 	C$fb_lpc922.c$869$1$1 ==.
                           3208 ;	../fb_lpc922.c:869: inc_pcount=0;
   0A5F C2*0E              3209 	clr	_inc_pcount
                    0A61   3210 	C$fb_lpc922.c$870$1$1 ==.
                           3211 ;	../fb_lpc922.c:870: connected=0;	// keine Verbindung
   0A61 C2*0D              3212 	clr	_connected
                    0A63   3213 	C$fb_lpc922.c$872$1$1 ==.
                           3214 ;	../fb_lpc922.c:872: init_rx();		// Empfang initialisieren
   0A63 12s05rE5           3215 	lcall	_init_rx
                    0A66   3216 	C$fb_lpc922.c$873$1$1 ==.
                    0A66   3217 	XG$restart_hw$0$0 ==.
   0A66 22                 3218 	ret
                           3219 	.area CSEG    (CODE)
                           3220 	.area CONST   (CODE)
                    1D00   3221 G$eeprom$0$0 == 0x1d00
                    1D00   3222 _eeprom	=	0x1d00
                           3223 	.area XINIT   (CODE)
                           3224 	.area CABS    (ABS,CODE)
